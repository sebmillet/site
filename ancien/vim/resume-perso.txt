*resume-perso.txt*	Resume personnel de l'aide Vim

Pour installer ce fichier d'aide sur votre Vim, copier ce fichier
(resume-perso.txt) dans votre répertoire doc personnel puis exécuter >
	:helptags nom_répertoire

Le répertoire doc personnel de Vim n'existe pas par défaut, il faut le créer.
Sur Linux, créer ~/.vim/doc, sur Windows, créer ~/_vim/doc où ~ est
C:\Documents and Settings\login_utilisateur
Exemple sur Linux : >
	:helptags ~/.vim/doc
<
Pour Vim version 7.2	Mai 2009 - février 2012, version 1.1

*resume-perso*	*rp*

1. Introduction		|rp-introduction|
2. Options		|rp-options|
3. Commandes		|rp-ex-commands|
4. Registres		|rp-registers|
5. Commandes		|rp-commands|
6. Sélection d'objets	|rp-text-objects|
7. Aide			|rp-help|
8. Mode insertion	|rp-insert-mode|
9. Recherches		|rp-search-patterns|
10. Lancement de Vim	|rp-vimopts|
11. Trucs		|rp-tricks|
12. Scripts utiles	|rp-scripts|

==============================================================================
1. Introduction				       *rp-introduction* *rpintro* {{{

Ce fichier est un résumé en français de ce qu'il faut connaître pour utiliser
Vim. Il n'a pas pour objectif de remplacer |index.txt| mais d'être un résumé
beaucoup plus rapide que ce dernier. Il liste les raccourcis clavier, les
commandes, les expressions régulières (rationnelles), et donne quelques trucs
trouvés ici et là dans les fichiers d'aide originaux. Il est proche de
|quickref.txt|pour le contenu, mais n'a pas vocation à l'exhaustivité.

Note
Il s'agit d'un résumé PERSONNEL, c'est-à-dire non exhaustif.

==============================================================================
}}}
2. Options					      *rp-options* *rpopt* {{{

- Manipulation des options
Consulter ce fichier d'aide |options.txt|.

:set all	Liste les valeurs de toutes les options			|:set|
:set option?	Affiche une option sans la modifier (utile pour booléen)
:set option	Active une option booléenne
:set nooption	Désactive une option booléenne
:set option!	Inverse une option booléenne (aussi :set invoption)
:set all&	Mets toutes les options à leur valeur par défaut|:set-default|
:set option&	Mets l'option à sa valeur par défaut (dépend de 'compatible')
:set option&vi	Mets l'option à sa valeur par défaut pour Vi
:set option&vim	Mets l'option à sa valeur par défaut pour Vim
:set option=..	Définis la valeur d'une option			   |:set-args|
:set option:..	Idem ci-dessus, définis la valeur d'une option
:set option+=..	Augmente (si numérique) ou ajoute (chaîne ou liste)   |:set+=|
:set option-=..	Idem ci-dessus, mais retranche ou enlève	      |:set-=|
:set option^=..	Multiplie (si numérique) ou ajoute en début de chaîne |:set^=|
:setglobal ..	Définis la valeur globale d'une option		  |:setglobal|
:setlocal ..	Définis la valeur locale d'une option		   |:setlocal|
:setlocal option< Mets l'option locale à sa valeur globale, en recopiant cette
		valeur (donc pas de lien dynamique)  |global-local||:setlocal|
:set option<	Mets l'option locale à vide, pour que la valeur globale soit
		prise en compte
:set termcap	Affiche les options du terminal
:options	Affiche la fenêtre des options			    |:options|
:verbose set ..	Affiche la valeur d'une option et des détails sur sa dernière
		mise à jour
:set <t_..>=..	Définis des caractéristiques termcap		 |set-termcap|

- Modeline

Permet de définir des options au début ou à la fin du fichier grâce à une
ligne spéciale (la modeline), 'modeline' doit être activé et 'modelines'
indique le nombre de lignes au début et à la fin où chercher cette ligne. Plus
de détails dans |modeline|.
	Premier format, exemple :
	  vi:noai:sw=3 ts=6 ~
	Deuxième format, exemple :
	  vim: set ai tw=75: ~

- Options courantes

'ignorecase' 'ic'	Recherche insensible à la casse		 |/ignorecase|
'smartcase' 'scs'	Recherche sensible à la casse s'il y a des majuscules
			dans la chaîne recherchée alors que l'option
			'ignorecase' est activé
'shiftwidth' 'sw'	{n} Taille d'un tab à l'indentation (commandes < et >)
'shiftround' 'sr'	Arrondis l'indentation à un multiple de 'shiftwidth'
'tabstop' 'ts'		{n} Taille d'un caractère de tabulation à l'affichage
'softtabstop' 'sts'	{n} Taille d'un tab en nombre d'espaces, lorsqu'inséré
			à la saisie
'expandtab' 'et'	La saisie d'un caractère de tabulation produit
			uniquement des espaces
'smarttab' 'sta'	En début de ligne, insère des espacements selon
			'shiftwidth', sinon insère les tabulations selon
			'tabstop' ou 'softtabstop'
'hlsearch' 'hls'	Mets en surbrillance ce que la recherche trouve
'linebreak' 'lbr'	Pas de coupure de mot lors du passage à la ligne de
			l'affichage (option 'wrap' activée)
'autoindent' 'ai'	Auto-indentation
'smartindent' 'si'	Auto-indentation plus élaborée qu'avec 'autoindent'
'preserveindent' 'pi'	Préserve autant que possible les caractères présents
			sur la ligne en cours d'indentation
'copyindent' 'ci'	Recopie les caractères utilisés pour indenter, quels
			qu'ils soient, au moment d'indenter une nouvelle ligne
'fileformat' 'ff'	{s} Détermine le type de fichier texte pour les sauts
			de ligne (unix, dos ou mac, voir 'fileformats')
'filetype' 'ft'		{s} Détermine le type de fichier (cpp, cmd, pl, etc.)
'list'			Affiche les caractères non imprimables
'listchars' 'lcs'	Affichage différencié des caractères blancs, utilisé
			avec l'option 'list'
'number' 'nu'		Affiche les numéros de ligne
'numberwidth' 'nuw'	{n} Nombre de colonnes pour les numéros de ligne,
			lorsque l'option 'number' est activée
'scroll' 'scr'		{n} Nombre de lignes à scroller       |CTRL-U||CTRL-D|
'scrollbind' 'scb'	Lie les fenêtres pour le scrolling    |scroll-binding|
'scrollopt' 'sbo'	{s,..} Réglages de 'scrollbind', les options sont ver,
			hor et jump			      |scroll-binding|
'scrolloff' 'so'	{n} Nombre minimal de lignes toujours affichées en
			haut et en bas de l'écran
'scrolljump' 'sj'	{n} Nombre de lignes à scroller lorsque le curseur
			sort de l'écran
'sidescrolloff' 'siso'	{n} Idem option 'scrolloff' mais horizontalement,
			'wrap' doit être désactivé
'sidescroll' 'ss'	{n} Nombre de lignes à scroller horizontalement
			lorsque le curseur sort de l'écran, 'wrap' désactivé
'startofline' 'sol'	Les déplacements de grande taille reviennent à la
			ligne
'wrap'			Reviens à la ligne (à l'affichage) pour les lignes qui
			dépassent la largeur à l'écran
'wrapmargin' 'wm'	{n} Marge à droite pour le mode 'wrap'
'textwidth' 'tw'	{n} Largeur du texte (pour formatage automatique)
'incsearch' 'is'	Pour les commandes / et ?, démarre la recherche au
			cours de la frappe
'encoding' 'enc'	{s} Encodage	      |encoding-table||encoding-names|
'termencoding' 'tenc'	{s} Encodage du terminal
'fileencoding' 'fenc'	{s} Encodage du fichier
'fileencodings' 'fencs'	{s,..} Encodages à tester à l'ouverture d'un fichier
'backup' 'bk'		Conserve une sauvegarde de l'ancienne version du
			fichier en cours d'édition, cf. 'writebackup',
			'backupcopy', 'backupdir', 'backupext' et 'backupskip'
								|backup-table|
'backspace' 'bs'	{s,..} Définis ce que la touche Suppression peut
			supprimer en mode insertion, peut contenir indent, eol
			et start
'spell'			Active la correction orthographique
'spelllang' 'spl'	{s,..} Langue(s) de la correction orthographique,
			exemple : fr,en
'spellfile' 'spf'	{s,..} Dictionnaires personnels pour	  |zg| et |zw|
'spellsuggest' 'sps'	{s,..} Affichage des suggestions      |spellsuggest()|
  best : méthode qui fonctionne bien pour l'anglais
  double : utilise la méthode "fast" + sonorités de la langue
  fast : méthode qui se contente de tester des changements basiques
  {n} : nombre maximal de suggestions affichées par z=
  file:{fichier} : utilise le fichier, dont le format de ligne est
		   mot/mot_suggéré
  expr:{expr} : Évalue l'expression {expr}
'spellcapcheck' 'spc'	{s} Expression régulière pour détecter les fins de
			phrase, afin de signaler les majuscules manquantes en
			début de phrase, <vide> : ne pas faire ce test
'dictionary' 'dict'	{s,..} Liste de dictionnaires utilisés lors de la
			complétion invoquée par |i_CTRL-X_CTRL-K|
'thesaurus' 'tsr'	Liste de fichiers thesaurus consultés lors de la
			complétion invoquée par |i_CTRL-X_CTRL-T|

  * Avancé *
'compatible' 'cp'	{s..} Ensemble de lettres indiquant quelles
			fonctionnalités conserver dans un mode de
			compatibilité avec Vi
'formatoptions' 'fo'	{s..} Options pour le formatage auto	    |fo-table|
  t : ajouter des sauts de ligne automatiquement
  c : idem ci-dessus, dans les commentaires (option 'comments')
  r : démarre un commentaire auto après appui sur la touche <CR>
  o : démarre un commentaire auto après appui sur |o| ou |O|
  q : autorise le formatage des commentaires avec |gq|
  w : espace en fin de ligne = le paragraphe continue ligne suivante
  a : formatage automatique des paragraphes à chaque modification
  n : reconnaissance des listes numérotées pour l'indentation (option
      'formatlistpat')
  2 : utilise l'indentation de la 2ème ligne pour la suite du paragraphe
  v b : mode de compatibilité Vi, plus restrictif
  l : ne coupe pas une ligne qui dépassait 'textwidth' avant l'insertion
  m M B : gestion des caractères multi-octets
  1 : si possible, ne coupe pas une ligne après un mot d'une lettre
'formatprg' 'fp'	Programme pour formater avec gq
'formatexpr' 'fex'	Expression pour formater avec gq
'formatlistpat' 'flp'	{s} Utilisé pour la reconnaissance des en-têtes de
			liste durant le formatage automatique, lié au drapeau
			"n" de l'option 'formatoptions'
'binary' 'bin'		Fichier binaire, modifie en cascade d'autres options
  vim -b ou :e ++bin au lancement de Vim ou à l'ouverture d'un fichier
'fileformats' 'ffs'	{s,..} Formats à essayer (dans l'ordre) pour
			déterminer le format d'un fichier, les formats
			possibles sont unix (<LF>), dos (<CR><LF>) et mac
			(<CR>)
'viminfo' 'vi'		{s,..} Définis ce que le fichier est susceptible de
			mémoriser				|viminfo-file|
'insertmode' 'im'	Reste en mode insertion, |i_CTRL-O| pour exécuter une
			commande et revenir au mode insertion, |i_CTRL-L| pour
			exécuter plusieurs commandes
'breakat' 'brk'		{s} Caractères auxquels passer à la ligne à l'écran,
			si les options 'wrap' et 'linebreak' sont activées
'showbreak' 'sbr'	{s} Chaîne à afficher devant les lignes coupées à
			l'écran, si l'option 'wrap' est activée
'modeline' 'ml'		Prends en compte la ligne de définitions des options
			(la ligne modeline) pouvant se trouver au début ou à
			la fin des fichiers texte		    |modeline|
'modelines' 'mls'	{n} Nombre de ligne à examiner pour la modeline
'path' 'pa'		{s,..} Répertoires où faire des recherches (commandes
			:find, gf, ...), * remplace n'importe quel nom de
			fichier (dans même répertoire), ** étend la recherche
			à toute l'arborescence
'key'			{s} Clé d'encryption, recommandé uniquement pour
			effacer la clé				  |encryption|
'display' 'dy'		{s,..} Règle certains aspects de l'affichage
  lastline : affiche une ligne tronquée au lieu de @ si dépassement
  uhex : affiche le code des caractères non imprimables
'showmatch' 'sm'	Fais brièvement clignoter le curseur sur la parenthèse
			correspondante, émet un bip s'il n'y a pas de
			correspondance (aussi pour { } et [ ])
'matchtime' 'mat'	{n} Durée du clignotement à effectuer si l'option
			'showmatch' est activée
'matchpairs' 'mps'	{s,..} Paires de caractères qui vont ensemble telles
			que (), [], etc.
'virtualedit' 've'	{s,..} Positionnement du curseur en-dehors du texte
  block : mode visual block
  insert : mode insertion
  all : tous les modes
  onemore : autorise le curseur un caractère après la fin de ligne
'wildmenu' 'wmnu'	Affiche un menu lors de la complétion en ligne de
			commande Ex
'wildchar' 'wc'		{n} Caractère pour démarrer la complétion en ligne de
			commande
'wildcharm' 'wcm'	{n} Idem 'wildchar' mais pour les macros
'wildignore' 'wig'	{s,..} Liste de recherche de fichiers à ignorer pour
			la complétion de noms de fichiers en ligne de commande
'wildmode' 'wim'	{s,..} Type de complétion en ligne de commandes
			lorsque 'wildchar' est pressé
'wildoptions' 'wop'	{s,..} Options de la complétion en ligne de commande
'suffixes' 'su'		{s,..} Extensions de fichiers à ignorer lors de la
			complétion en ligne de commandes	    |suffixes|
'suffixesadd' 'sua'	{s,..} Suffixes à ajouter si ouverture automatique
			(|gf|, |[_CTRL-I|, etc)
'whichwrap' 'ww'	{s,..} Mouvements du curseur susceptibles de passer à
			la ligne précédente ou à la ligne suivante
'joinspaces' 'js'	Ajoute 2 espaces au lieu d'un avec la commande J,
			après ., ? et !
'nrformats' 'nf'	{s,..} Format des nombres pour |CTRL-A| et |CTRL-X|
  alpha : incrémente des caractères uniques (a -> b -> c -> ...)
  octal : les nombres qui commencent par 0 sont en octal
  hdex : les nombres qui commencent par 0x ou 0X sont hexadécimaux
'ruler' 'ru'		Affiche la position du curseur en bas à droite
'rulerformat' 'ruf'	{s} Définis le format du ruler (option 'ruler')
'wrapscan' 'ws'		Recherche : retourner au début du fichier après avoir
			atteint la fin (ou vice-versa)
'isident' 'isi'		{s,..} Caractères autorisés dans les identificateurs
			(\i dans les recherches)		     |pattern|
'iskeyword' 'isk'	{s,..} Caractères autorisés dans les mots-clés (\k
			dans les recherches)			     |pattern|
'isprint' 'isp'		{s,..} Caractères imprimables (\p dans les recherches)
								     |pattern|
'isfname' 'isf'		{s,..} Caractères autorisés dans les noms de fichier
			(\f dans les recherches)		     |pattern|
'sessionoptions' 'ssop'	{s,..} Éléments enregistrés par |:mksession|, peut
			contenir blank, buffers, curdir, folds, globals, help,
			localoptions, options, resize, sesdir, slash,
			tabpages, unix, winpos, winsize
'viewoptions' 'vop'	{s,..} Éléments enregistrés par |:mkview|, peut
			contenir cursor, folds, options, slash, unix
'foldcolumn' 'fdc'	{n} Réserve n colonnes à gauche de l'écran pour
			afficher les folds
'foldenable' 'fen'	Ouvre tous les fold si off (voir |zi|)
'foldopen' 'fdo'	{s,..} Déclenchement de l'ouverture des folds
  all : toutes options
  block : (, {, [(, [{, etc.
  hor : mouvements horizontaux
  insert : toute commande en mode insertion
  jump : déplacements de grande portée (|gg|, |G|, etc.)
  mark : déplacements sur un mark
  percent : déplacement avec |%|
  quickfix : commandes liées à quickfix (|:make|, |:cnext|, etc.)
  search : recherche
  tag : saut vers un tag
  undo : undo (|u|) et redo (|CTRL-R|)
'foldclose' 'fcl'	{s} Si défini "all", ouvre et ferme automatiquement
			les folds lors des déplacements
'foldlevel' 'fdl'	{n} Niveau d'affichage des fold, voir |zm||zr||zM||zR|
'foldlevelstart' 'fdls'	{n} Définis 'foldlevel' par défaut à l'entrée dans un
			buffer
'foldminlines' 'fml'	{n} Nombre minimum de lignes d'un fold à l'écran pour
			l'afficher fermé
'foldnestmax' 'fdn'	{n} Limite supérieure du niveau d'imbrications des
			folds, ne peut dépasser 20 dans tous les cas
'foldmethod' 'fdm'	{s} Méthode de fold, être manual, indent, expr,
			marker, syntax ou diff			|fold-methods|
'foldignore' 'fdi'	{s} Avec la méthode "indent", les lignes commençant
			par l'un des caractères de 'foldignore' prennent leur
			niveau de fold des lignes qui les entourent
'foldexpr' 'fde'	{s} Expression lorsque foldmethod vaut "expr"
'foldmarker' 'fmr'	{s,..} Balises pour la méthode de fold "marker"
			(option 'commentstring' et |zf|)	 |fold-marker|
'foldtext' 'fdt'	Pour afficher les fold fermés	       |fold-foldtext|
'shortmess' 'shm'	{s..} Ensemble d'options d'un caractère pour régler
			les messages affichés, m pour '+' au lieu de
			'Modified,' r pour '[RO]' au lieu de '[readonly]', s
			pour ne rien afficher si la recherche poursuit en
			début de fichier (ou à la fin selon le sens de la
			recherche) (seulement si l'option 'wrapscan' est
			activée), I pour ne pas afficher le message
			d'introduction (:intro), etc.		   |hit-enter|
'terse'			Ajoute ou enlève l'option s de 'shortmess', ce qui
			rend silencieux le mode 'wrapscan'
'shortname' 'sn'	Les noms de fichiers suivent les limites MS-DOS, ils
			font 8 caractères et une extension de 3 caractères
'magic'			Dans les recherches les caractères ., *, ^ et $ sont
			magiques sans \ avant			     |pattern|
'tildeop' 'top'		La commande ~ se comporte comme un opérateur (suivi
			d'un mouvement)
'timeout' 'to'		Prends en compte un timeout pour le code clavier
			suivant ou le mapping
'timeoutlen' 'tm'	{n} Délai pour l'option 'timeout'
'ttimeout'		Si 'notimeout', timeout sur les codes clavier
'ttimeoutlen' 'ttm'	{n} Délai pour l'option 'ttimeout'
'history' 'hi'		{n} Taille de l'historique des commandes et recherches
'directory' 'dir'	{s,..} Emplacements où mettre le fichier de swap, . =
			répertoire du fichier
'remap'			Autorise les commandes |:map| à fonctionner
			récursivement. Il est recommandé de laisser cette
			option activée, utiliser |:noremap| pour contourner
			sur un mapping en particulier
'report'		Limite au-delà laquelle le nombre de lignes modifiées
			est rapporté après exécution d'une commande
'maxmapdepth' 'mmd'	{n} Niveau maximum de transformation des mappings,
			évite de se bloquer en cas de mapping récursif à
			l'infini, lié à l'option 'remap'
'showcmd' 'sc'		Affiche les commandes (mode normal) en cours de saisie
'cmdheight' 'ch'	{n} Nombre de lignes de la ligne de commande
'complete' 'cpt'	{s..} Types de mot pris en compte à la complétion
  . : buffer en cours
  w : les buffers des autres fenêtres
  b : buffers chargés
  u : buffers non chargés
  U : buffers non listés
  k : prend en compte les fichiers de l'option 'dictionary'
  kspell : prend en compte le dictionnaire en cours
  k{dict} : le nom du dictionnaire (peut apparaître plusieurs fois)
  s : les fichiers de l'option 'thesaurus'
  s{tsr} : le nom du thesaurus (peut apparaître plusieurs fois)
  i : fichiers inclus
  d : fichiers inclus, et prend en compte les macros
  ] ou t : tag
'completefunc' 'cfu'	{s} Fonction pour la complétion utilisateur appelée
			par |i_CTRL-X_CTRL-U|		  |complete-functions|
'completeopt' 'cot'	{s,...} Complétion en mode insertion, peut contenir
			menu, menuone, longest et preview     |ins-completion|
'showfulltag' 'sft'	Affiche un tag avec ce qui suit, ce qui permet durant
			l'auto-complétion d'afficher les arguments d'une
			fonction			      |ins-completion|
'omnifunc' 'ofu'	{s} Nom de la fonction pour l'omni-complétion,
			invoquée par |i_CTRL-X_CTRL-O|	  |complete-functions|
'infercase' 'inf'	Applique la casse du mot saisi aux mots proposés
			durant la complétion automatique      |ins-completion|
'pumheight' 'ph'	{n} Taille maximale du menu de complétion
							 |ins-completion-menu|
'confirm' 'cf'		Demande confirmation si perte des changements, sinon
			une erreur est produite			   |confirm()|
'tags' 'tag'		{s,..} Fichiers tags à prendre en compte. Le
			fonctionnement des tags est réglé avec 'tagbsearch',
			'taglength', 'tagrelative' et 'tagstack', l'option
			'tags' fonctionne avec ** pour inclure toute une
			arborescence				 |tags-option|
'tagbsearch' 'tbs'	Recherche binaire dans les tag
'taglength' 'tl'	{n} Nombre de caractères significatifs d'un tag
'tagrelative' 'tr'	Les noms de fichiers d'un fichier de tag sont relatifs
			au répertoire du fichier de tag
'tagstack' 'tgst'	Si off, ne modifie pas la pile des tags
'winaltkeys' 'wak'	Indique au GUI que faire avec Alt+Touche, vaut menu,
			yes ou no				     |:simalt|
'tabline' 'tal'		{s} Format de l'affichage des onglets|setting-tabline|
'showtabline' 'stal'	{n} Détermine quand afficher la ligne des onglets,
			vaut 0 (jamais), 1 (si >= 2) ou 2 (toujours)
'tabpagemax' 'tpm'	{n} Nombre maximal d'onglets ouverts avec |-p|
'guipty'		Utilise le pseudo-terminal pour effectuer des
			entrées/sorties avec le shell, sinon utilise des pipes
'guitablabel' 'gtl'	{s} Affichage des onglets du GUI |setting-guitablabel|
'guitabtooltip' 'gtt'	{s} Tooltip à affiche sur un onglet du GUI
'guicursor' 'gcr'	{s,..} Options pour régler l'apparence du curseur
'guifont' 'gfn'		{s,..} Liste de fontes à essayer jusqu'à en trouver
			qui fonctionne, peut être suivi de :h{hauteur} pour
			régler la taille, >
			  :set guifont=*
<			ouvre une boîte de dialogue de sélection de fonte, >
			  :echo getfontname()
<			affiche la police actuelle	       |getfontname()|
'guifontwide' 'gfw'	{s} Police à utiliser pour les caractères doubles
'linespace' 'lsp'	{n} Pixels entre les lignes
'guiheadroom' 'ghr'	{n} Pixels soustraits de la hauteur de l'écran lorsque
			gvim s'y adapte
'guioptions' 'go'	{s..} Réglages du GUI, liste non exhaustive :
  c : pour afficher les choix simples à la console au lieu de GUI
  l : ascenseur à gauche
  m : pour afficher la barre de menu
  t : menus 'tear off' (séparables)
  T : affiche la barre d'outils
  b : ascenseur en bas
  h : la taille de la scrollbar inférieure dépend de la ligne du curseur
'langmenu' 'lm'		{s} Langue des menus, au même format que |:language|
'toolbar' 'tb'		{s,..} Réglages de la barre d'outils, peut contenir
			icons, text, horiz, tooltips		 |gui-toolbar|
'toolbariconsize' 'tbis' {s} Peut valoir tiny, small, medium ou large
'selectmode' 'slm'	{s,..} Indique quand démarrer le mode sélection au
			lieu de Visual, les options sont mouse, key et cmd,
			cette option est définie par |:behave|	 |select-mode|
'mouse'			{s..} Modes autorisés pour la gestion de la souris,
			les options sont n, v, i, c, h (fichiers d'aide), a
			(tous les modes) et r (en réponse aux prompt)
						      |gui-mouse||mouse-using|
'mousefocus' 'mousef'	La fenêtre ayant le focus suit la souris
'mousehide' 'mh'	Cache la souris pendant l'édition
'mousemodel' 'mousem'	{s} Comportement des boutons de la souris, surtout le
			bouton droit				  |popup-menu|
  extend : le bouton droit étend la sélection (comme un xterm)
  popup : le bouton droit affiche un menu, shift + bouton gauche étend la
	  sélection, comme sous windows
  popup_setpos : comme popup + le bouton droit déplace le curseur sur le
		 caractère sous la souris
'mouseshape' 'mouses'	{s,..} Apparence du pointeur selon mode et position
'mousetime' 'mouset'	{n} Milli-secondes entre deux clics pour double-clic
'more'			Pause d'une page à l'autre lors des affichages
'bufhidden' 'bh'	{s} Indique ce qui se passe quand le buffer n'est plus
			affiché				     |special-buffers|
  <vide> : suit l'option 'hidden'
  unload : décharge le buffer
  delete : supprime le buffer, comme avec |:bdelete|
  wipe : détruits le buffer, comme avec |:bwipeout|
'hidden' 'hid'		Décharge (off) ou cache (on) un buffer abandonné
								     |abandon|
'buflisted' 'bl'	Buffer affiché dans la liste des buffers (:ls)
'switchbuf' 'swb'	{s,..} Comportement pour passer d'un buffer à un
			autre, les options sont useopen, usetab, split, newtab
'browsedir' 'bsdir'	{s} Quel répertoire pour le file browser :
  last : dernier répertoire où un fichier a été ouvert ou enregistré
  buffer : répertoire du buffer correspondant
  current : répertoire courant
  {path} : définis le répertoire où démarrer
'verbose' 'vbs'		Rends Vim plus bavard			    |:verbose|
'verbosefile' 'vfile'	{s} Si non vide, tous les messages sont écrits dans le
			fichier défini par cette option
'viewdir' 'vdir'	{s} Répertoire des fichiers créés par	     |:mkview|
'previewheight' 'pvh'	{n} Hauteur de la fenêtre de pré-visualisation |:ptag|
'previewwindow' 'pvw'	Activé si fenêtre de pré-visualisation
'helpheight' 'hh'	Hauteur minimale de la fenêtre d'aide, lorsqu'elle est
			ouverte avec la commande |:help|, 0 = ignorer
'helpfile' 'hf'		{s} Emplacement du fichier d'aide principal
'helplang' 'hlg'	{s,..} Langue de l'aide		     |help-translated|
'runtimepath' 'rtp'	{s,..} Répertoires où chercher les scripts Vim
'gdefault' 'gd'		Substitutions globales par défaut (/g implicite)
'lines'			{n} Nombre de lignes affichées dans la fenêtre Vim
'columns' 'co'		{n} Idem ci-dessus, pour les colonnes gvim |-geometry|
			permet de régler ces paramètres au démarrage
'eventignore' 'ei'	{s,..} Liste d'événements à ignorer avec les
			auto-commandes				    |:autocmd|
'statusline' 'stl'	{s} Définis la ligne de description du buffer, affiché
			par défaut lorsque plusieurs fenêtres sont visibles à
			l'écran, fonctionne avec les groupes de surbrillance
			User1, User2, etc., lié à 'laststatus'	 |status-line|
			Exemple : >
  :set statusline=%1*%m%*\ %<%F\ %h%r%=\ %y\ %-14.(%l,%c%V%)\ %P
  :hi User1 cterm=inverse,bold ctermfg=red gui=inverse,bold guifg=red
'laststatus' 'ls'	{n} Définis quand afficher la ligne de statut, vaut 0
			(jamais), 1 (si >= 2) ou 2 (toujours)	 |status-line|
'include' 'inc'		{s} Identifie les fichiers inclus d'un fichier source
'includeexpr' 'inex'	{s} Transforme la partie dans l'instruction include
			(détecté avec 'include') en nom de fichier
'define' 'def'		{s} Identifie les macros	      |include-search|
'comments' 'com'	{s,..} Identifie les commentaires, utilisé par le
			formatage automatique		     |format-comments|
'commentstring' 'cms'	{s} Utilisé par les fold "marker"	 |fold-marker|
'printoptions' 'popt'	{s,..} Options d'impression		 |popt-option|
'printdevice' 'pdev'	{s} Périphérique pour l'impression	 |pdev-option|
'printexpr' 'pexpr'	{s} Expression pour lancer l'impression |pexpr-option|
'printfont' 'pfn'	{s} Police de caractères à l'impression   |pfn-option|
'printheader' 'pheader'	{s} Format d'en-tête à l'impression   |pheader-option|
'updatetime' 'ut'	{n} Temps en milli-secondes au bout duquel le fichier
			de swap est écrit sur le disque, également utilisé par
			l'événement |CursorHold|
'updatecount' 'uc'	{n} Écris le fichier de swap après n caractères saisis
'swapfile' 'swf'	Utilisation d'un fichier de swap (= option -n au
			lancement de Vim)
'swapsync' 'sws'	{s} Synchronise sur disque après écriture dans le swap
'fsync' 'fs'		Appelle fsync() après écriture dans un fichier
'cindent' 'cin'		Auto-indentation pour le langage C, légèrement
			meilleur que 'smartindent'		 |C-indenting|
'indentexpr' 'inde'	{s} Expression pour l'indentation, invoqué par
			l'opérateur |=| entre autres	   |indent-expression|
'indentkeys' 'indk'	{s} Touches qui provoquent l'indentation en mode
			insertion			   |indentkeys-format|
'equalprg' 'ep'		{s} Programme externe pour indenter
'cinoptions' 'cino'	{s,..} Indentation en C		   |cinoptions-values|
'cinwords' 'cinw'	{s,..} Mots provoquant une indentation supplémentaire
'cinkeys' 'cink'	{s,..} Touches provoquant l'indentation durant
			l'insertion			      |cinkeys-format|
'errorbells' 'eb'	Utilise l'alarme sonore
'visualbell' 'vb'	Alarme visuelle
'equalalways' 'ea'	À l'ajout d'une fenêtre, dimensionne les fenêtres avec
			une taille égale
'eadirection' 'ead'	{s} Indique quand 'equalalways' est pris en compte,
			peut valoir ver, hor ou both
'splitbelow' 'sb'	Positionne une nouvelle fenêtre en-dessous de
			l'existante				      |:split|
'splitright' 'spr'	Positionne une nouvelle fenêtre à droite de
			l'existante				     |:vsplit|
'keywordprg' 'kp'	{s} Programme invoqué par la commande K
'operatorfunc' 'opfunc'	{s} Lié à |g@| pour mapper un opérateur|:map-operator|
'charconvert' 'ccv'	{s} Expression pour la conversion d'un encodage de
			caractères à un autre, uniquement si iconv() absent
'loadplugins' 'lpl'	Exécute les fichiers de plugin au démarrage de Vim
'background' 'bg'	{s} dark ou light, Vim s'en sert pour adapter les
			couleurs de l'affichage
'syntax' 'syn'		{s} Active la surbrillance syntaxique en prenant comme
			nom la valeur de cette option
'autowrite' 'aw'	Écris automatiquement le fichier avant exécution d'une
			commande qui passe à un autre fichier telle que
			|:next|, |:tag|, |:!|, etc.
'autowriteall' 'awa'	Écris automatiquement un fichier modifié dans tous les
			cas, y compris |:edit|, |:enew|, |:quit|, etc.
'writebackup' 'wb'	Effectue une sauvegarde avant d'écrire le fichier, et
			efface-la ensuite à moins que l'option 'backup' ne
			soit activée				|backup-table|
'backupcopy' 'bkc'	{s} Indique le comportement de Vim lorsqu'une
			sauvegarde du fichier à écrire est conservée, peut
			valoire yes, no ou auto
'backupdir' 'bdir'	{s,..} Répertoires où enregistrer les fichiers de
			sauvegarde, le premier où cela est possible est
			utilisé, . signifie "répertoire du fichier édité"
'backupext' 'bex'	{s} Chaîne ajoutée au fichier pour produire le nom du
			fichier de sauvegarde
'backupskip' 'bsk'	{s} Expression de recherche qui désactive la
			sauvegarde des fichiers qu'elle détecte
'patchmode' 'pm'	{s} Conserve une version originale du fichier édité,
			en le sauvegardant la première fois dans le nom du
			fichier suivi du contenu de 'patchmode', cette
			sauvegarde n'est jamais écrasée
'winheight' 'wh'	{n} Hauteur minimale de la fenêtre
'winminheight' 'wmh'	{n} Hauteur minimale absolue de toute fenêtre
'winfixheight' 'wfh'	Fige la hauteur de la fenêtre
'winwidth' 'wiw'	{n} Largeur minimale de la fenêtre
'winminwidth' 'wmw'	{n} Largeur minimale absolue de toute fenêtre
'winfixwidth' 'wfw'	Fige la largeur de la fenêtre
'cmdwinheight' 'cwh'	{n} Hauteur de la fenêtre des commandes
'diff'			Ajoute la fenêtre à la comparaison en cours  |vimdiff|
'diffexpr' 'dex'	{s} Expression pour comparer 2 fichiers|diff-diffexpr|
'diffopt' 'dip'		{s,..} Réglages de diff, peut contenir filler,
			context:{n}, icase, iwhite, horizontal, vertical,
			foldcolumn:{n}
'digraph' 'dg'		Autorise la saisie de digraphs
'patchexpr' 'pex'	{s} Expression pour l'application d'un patch, utilisée
			par |:diffpatch|		      |diff-patchexpr|
'shell' 'sh'		{s} Nom du shell exécuté par !
'shellcmdflag' 'shcf'	{s} Options à passer au shell
'shellpipe' 'sp'	{s} Chaîne à passer à la commande |:make|, %s est le
			nom du fichier de sortie temporaire (ajouté
			automatiquement si non spécifié)
'shellredir' 'srr'	{s} Chaîne à utiliser pour rediriger la sortie des
			commandes shell dans un fichier
'shellquote' 'shq'	{s} Caractères à échapper dans les commandes shell
'shellxquote' 'sxq'	{s} Idem 'shellquote' mais redirection incluse
'shellslash' 'ssl'	Utilise des / pour étendre des noms de fichier
'shelltemp' 'stmp'	Utilise un fichier temporaire avec les commandes
			shell, sinon utilise un pipe
'maxmem' 'mm'		Mémoire maximale à utiliser pour un buffer
'maxmemtot' 'mmt'	Mémoire maximale à utiliser pour tous les buffers
'grepprg' 'gp'		{s} Commande exécutée par |:grep|
'grepformat' 'gfm'	{s} Pour reconnaître la sortie de grep
'makeprg' 'mp'		{s} Programme de la commande |:make|
'errorformat' 'efm'	{s} Pour parser le fichier d'erreurs	 |errorformat|
'makeef' 'mef'		{s} Nom du fichier d'erreur pour |:make| et |:grep|
'errorfile' 'ef'	{s} Fichier d'erreur pour le mode quickfix
'ambiwidth' 'ambw'	{s} Comment traiter les signes spéciaux, peut valoir
			single (1 caractère) ou double (2 caractères)
'autochdir' 'acd'	Définis le répertoire courant comme celui du fichier
			chaque fois qu'un fichier est ouvert ou à chaque
			changement de buffer, entre autres
'autoread' 'ar'		Lis automatiquement un fichier s'il a été modifié
			en-dehors de Vim			   |timestamp|
'bomb'			Écris un Byte-Order-Mark en enregistrant le fichier
'cdpath' 'cd'		{s,..} Répertoires pour les commandes |:cd| et |:lcd|
'cedit'			{c} Touche en mode ligne de commande pour afficher la
			fenêtre des commandes
'cursorcolumn' 'cuc'	Mets en surbrillance la colonne du curseur
'cursorline' 'cul'	Mets en surbrillance la ligne du curseur
'endofline' 'eol'	Utilisé pour mémoriser la présence de <EOL> à la fin
			d'un fichier binaire
'esckeys' 'ek'		Reconnais les touches échappées en mode insertion
'exrc' 'ex'		Autorise .vimrc, .exrc et .gvimrc dans le répertoire
			courant
'keymodel' 'km'		{s,..} Change la manière dont la sélection est gérée
			avec Shift-Touches_de_direction, permet à Vim de se
			comporter comme un éditeur classique, les options
			possibles sont startsel et stopsel
'maxcombine' 'mco'	{n} Nombre maximal de caractères qui peuvent se
			combiner à l'affichage (uniquement avec UTF-8)
'maxfuncdepth' 'mfd'	{n} Récursivité maximale d'appel de fonctions
'paste'			Améliore la gestion du copier/collé dans un terminal
'quoteescape' 'qe'	{s} Caractères utilisés pour échapper les guillemets
			dans les chaînes de caractères
'secure'		Mode sécurisé, interdis certaines fonctionnalités
'selection' 'sel'	{s} Réglages de la sélection Visual et Select
'term'			{s} Nom du terminal
'title'			Définis le titre de la fenêtre avec 'titlestring'
'titlelen'		{n} Pourcentage de 'columns' pour afficher le titre
'titlestring'		{s} Format du titre de la fenêtre
'ttybuiltin' 'tbi'	Si on, prend en compte d'abord les termcap internes
'ttyfast' 'tf'		Indique une connexion rapide au terminal, permet
			d'optimiser l'affichage avec certains xterm
'warn'			Avertis si une commande shell est exécutée alors que
			le fichier n'a pas été enregistré
'window' 'wi'		Hauteur en lignes de l'écran
'buftype' 'bt'		{s} Type de buffer		     |special-buffers|
  <vide> : buffer normal
  nofile : buffer non rattaché à un fichier (scratch)
  nowrite : le buffer ne peut pas être écrit
  acwrite : le buffer sera toujours écrit avec les autocmd BufWriteCmd
  quickfix : contient une liste d'erreurs
  help : buffer d'aide
'modified' 'mod'	Le buffer est dans l'état modifié
'modifiable' 'ma'	Indique si le buffer peut être modifié
'write'			Autorise à écrire le fichier
'writeany' 'wa'		Autorise les écrasements de fichier sans ajout de !
'readonly' 'ro'		Mode lecture-seule, nécessite ! pour passer outre
'writedelay' 'wd'	{n} Délai en micro-secondes pour envoyer des
			caractères à l'écran, pour le débugage uniquement
'casemap' 'cmp'		{s,..} Options pour la gestion de la casse selon
			l'encodage, peut contenir internal et keepascii
'clipboard' 'cb'	{s,..} Options pour la gestion du presse-papier
  unnamed : utilise le presse-papier par défaut, à la place de unnamed
  autoselect : Vim gère lui-même la sélection, lié au "a" de 'guioptions'
  autoselectml : comme autoselect mais uniquement pour la sélection modeless,
		 lié au "A" de 'guioptions'
  exclude:{rec} : exclut les terminaux ('term') détectés par cette recherche
'fillchars' 'fcs'	{s,..} Caractères de remplissage dans différents cas
  stl:c		statusline de la fenêtre actuelle
  stlnc:c	statusline des autres fenêtres
  vert:c	séparateur vertical
  fold:c	pour 'foldtext'
  diff:c	lignes effacées en mode 'diff'
'highlight' 'hl'	{s,..} Réglage de l'affichage de différents type de
			texte standard de Vim
'lazyredraw' 'lz'	Ne rafraîchis pas l'écran dans certains cas, utiliser
			la commande |:redraw| pour mettre à jour
'opendevice' 'odev'	Autorise lecture et écriture avec des périphériques
'restorescreen' 'rs'	À la sortie de Vim, rétablis l'affichage
'undolevels' 'ul'	{n} Nombre maximal d'undo

==============================================================================
}}}
3. Commandes Ex					   *rp-ex-commands* *rpex* {{{

- Saisie dans la ligne de commande Ex (|cmdline-editing|) La complétion en
  ligne de commandes Ex est réglée par les options 'wildmenu', 'wildoptions',
  'wildmode', 'wildignore', 'wildcharm', 'wildchar'

 :		Démarre le mode commande
|Q|		Démarre le mode commande permanent
 :{cmd}!	En général, force la commande même si perte des changements

|c_CTRL-D|	Affiche les complétions
|c_CTRL-L|	Complète avec l'occurrence la plus longue
|c_CTRL-R|	Colle un registre
|c_CTRL-R_CTRL-R|	Colle un registre littéralement (pas de mapping)
|c_CTRL-R_CTRL-F|	Colle le fichier sous le curseur
|c_CTRL-R_CTRL-P|	Idem ci-dessus mais prend en compte l'option 'path'
|c_CTRL-R_CTRL-W|	Colle le mot sous le curseur
|c_CTRL-R_CTRL-A|	Colle le MOT sous le curseur
|c_CTRL-V||c_CTRL-Q|	Insère un caractère littéralement (cf |i_CTRL-V|)
			Sous Win32 |c_CTRL-V| colle du texte, dans ce cas
			utiliser |c_CTRL-Q|
|c_CTRL-U|	Efface du curseur jusqu'au début de la ligne
|c_CTRL-W|	Efface le mot à gauche du curseur
|c_CTRL-K|	Saisir un digraph (cf |i_CTRL-K|)
|c_CTRL-P||c_CTRL-N|	Complétion de noms de fichiers : suivant ou précédent
|c_CTRL-L|	Complète autant que possible, tant qu'il n'y a pas d'ambiguïté
|c_CTRL-A|	Prends tous les choix possibles de la complétion
|c_<S-Left>||c_<S-Right>|	Mot précédent ou mot suivant
|CTRL-Y|	Copie dans le presse-papier la sélection modeless
|CTRL-F|	Ouvre la fenêtre de commandes (réglé par 'cedit')
 $		Termine la recherche (exemple : *.c$)		    |suffixes|
 :..|c_<Up>||c_<Down>|	Affiche l'historique commençant par ..
|:range|..	Exécute la commande qui suit pour un range du buffer. Parmi
		les commandes qui peuvent prendre un range, certaines prennent
		le fichier entier par défaut (:w), d'autres la ligne du
		curseur (:s), dans ce fichier d'aide je ne le précise pas. Un
		range est constitué d'une ou deux composantes (séparées par
		',') parmi les possibilités ci-dessous :
		  {n} : la ligne n, la première ligne est numéro 1
		  . : la ligne courante
		  $ : la dernière ligne
		  % : synonyme de 1,$ : tout le fichier
		  'm ou 'M : la marque m ou M
		  /...[/] : la prochaine ligne où la recherche réussit
		  ?...[?] : idem ci-dessus mais vers le haut
		  \/ : reproduis la dernière recherche vers le bas
		  \? : reproduis la dernière recherche vers le haut
		  \& : recherche la dernière substitution effectuée
		  +[{n}] : décale vers le bas de n, 1 par défaut
		  -[{n}] : décale vers le haut de n, 1 par défaut
		    Ainsi .+3 est la troisième en-dessous de la ligne
		    courante, $-5 est la 5ème ligne avant la fin du fichier
 {n}:..		Permet d'exécuter la commande n fois vers le bas
		Est traduit en :.,.+n-1
 {mode Visual}:	'<,'> appliquent la commande à la zone Visual en cours
 % #		Nom du fichier en cours (%) ou alternatif (#)	      |_%||_#|
 #n #<n		Nom de fichier du buffer n (avec < : ancien nom)
 ##		Tous les noms des fichiers séparés par des espaces	 |_##|
|<cword>||<cWORD>|	Le mot ou MOT se trouvant sous le curseur
|<cfile>|	Le nom de fichier ou de répertoire sous le curseur
|<afile>||<amatch>|	Nom de fichier avec les autocmd
|<abuf>|	Buffer en cours pour les autocmd
|<sfile>|	Nom du fichier de script lorsqu'exécuté avec :source
 Modificateurs de noms de fichier (à utiliser avec % par exemple)
|filename-modifiers|
   :p		Mets le nom de fichier en nom absolu			 |::p|
   :8		Mets le nom de fichier au format DOS 8.3		 |::8|
   :~		Écris le fichier relativement au répertoire perso	 |::~|
   :.		Écris le fichier relativement au répertoire courant	 |::.|
   :h		Chemin du nom de fichier				 |::h|
   :r		Nom de fichier sans l'extension (peut être répété)	 |::r|
   :e		Extension du fichier (peut être répété)			 |::e|
   :s?rec?rpl?	Cherche rec et remplace par rpl, une fois		 |::s|
   :gs?rec?rpl?	Idem ci-dessus, mais remplace toutes les occurrences	|::gs|
   <		Enlève l'extension du nom de fichier			|:_%<|

- Commandes Ex

Il n'y a pas de fichier d'aide unique sur les commandes, commencer par cette
aide |editing.txt|.

|:write|	[range] Enregistre le fichier en cours			  |:w|
|:wall|		[range] Même chose mais pour tous les buffers	       |:wall|
|:write|{f}	[range] Écris dans f sans changer le nom de fichier en cours
|:write|>> {f}	[range] Ajoute à f
|:update|	[range] Écris le fichier, seulement s'il a été modifié	 |:up|
|:quit||:qall|	Quitte le buffer en cours ou tous les buffers	     |:q||:qa|
|:saveas|{f}	Change le nom du fichier et enregistre-le		|:sav|
|:file| {f}	Définis ou affiche le nom de fichier en cours		  |:f|
|:0file|	Efface le nom de fichier				 |:0f|
|:new|[..]	Crée une nouvelle fenêtre (peut être suivi d'une commande)
|:edit|..	Édite un fichier					  |:e|
   |:edit!|	Recharge le fichier en cours (tel que sur le disque) (:e!)
|:enew|		Démarre un nouveau fichier dans la fenêtre courante	|:ene|
|:xit|		Comme |:wq| mais écris uniquement si changements	  |:x|
|:xall|		Écris les buffers modifiés et quitte			 |:xa|
|:/||:?|	Démarre une recherche en avant ou en arrière
 :!{cmd}	[range] Filtre le range dans la commande	       |:!cmd|
|:substitute|	[range] Substitution, /&cegiInp#lr  |count-items||s_flags||:s|
 :write !{cmd}	[range] Exécute {cmd} en lui envoyant le fichier comme entrée
									|:w_c|
|:read|{f}	Insère le contenu du fichier				  |:r|
|:read|!{cmd}	Insère le résultat (la sortie) de la commande		 |:r!|
 :0read		Insère au tout début du fichier (:$read insère à la fin)
 :[range]!xxd	[range] Édite le fichier en hexadécimal		   |using-xxd|
		Option -r pour reconvertir en texte
|:sort|[..]	[range] Tri, ! (:sort!) inverse le tri, peut prendre comme
		options i : ignore la casse, n : tri numérique, u : supprime
		les lignes identiques					|:sor|
|:hardcopy|[..]	[range] Imprime						 |:ha|
|:nohlsearch|	Stoppe la surbrillance de la recherche			|:noh|
|:syntax|	Affiche les définitions en cours, utilisé avec l'option on ou
		off, permet d'activer ou de désactiver la surbrillance
		syntaxique			    |:syn-on||syn-enable||:sy|
|:syntax|clear	Efface les définitions de surbrillance syntaxique
|:syncbind|	Aligne les fenêtres si l'option 'scrollbind' est active
|:split|[{cmd}]	Coupe la fenêtre en deux et exécute la commande		 |:sp|
|:vertical|	  Idem ci-dessus, mais couper verticalement	       |:vert|
|:only|		Ferme les autres fenêtres				 |:on|
|:tabnew|	Crée un nouvel onglet
|:tabmove|	Déplace un onglet				       |:tabm|
|:tabonly|	Ferme tous les onglets sauf l'onglet courant	       |:tabo|
|:tab|{cmd}	Si {cmd} crée une fenêtre, ouvre des onglets à la place
 :tab ball	Ouvre un onglet pour chaque buffer de la liste
 :tab help	Ouvre l'écran d'aide dans un nouvel onglet

- Commandes Ex avancées

|:sall|		Ouvre un fenêtre pour chaque fichier donné en argument
|:ball|		Ouvre une fenêtre pour chaque buffer dans la liste
|:hide|{cmd}	Cache le buffer en cours et exécute {cmd}		|:hid|
  |:hide|e {f}	Cache le buffer en cours et édite fichier
|:unhide|	Ouvre une fenêtre pour chaque fichier chargé		|:unh|
|:badd|		Ajoute un buffer					|:bad|
|:bdelete|	Supprime un buffer					 |:bd|
|:bnext||:bprevious|	Passe au buffer suivant ou précédent	    |:bn||:bp|
|:wnext||:wprevious|	Enregistre le fichier et passe au suivant ou au
			précédent				    |:wn||:wp|
|:bfirst||:blast|	Premier et dernier buffer		    |:bf||:bl|
|:buffer|{n}	Passe au n-ième buffer					  |:b|
|:sbuffer|{n}	Idem mais splitte la fenêtre horizontalement		 |:sb|
|:argdo|{cmd}	Exécute une commande pour chaque argument ([!])
|:windo|{cmd}	Exécute une commande pour chaque fenêtre ([!])
|:bufdo|{cmd}	Exécute une commande pour chaque buffer ([!])
|:tabdo|{cmd}	Exécute une commande pour chaque onglet ([!])	       |:tabd|
|:confirm|{cmd}	Demande confirmation {cmd} détruit des changements     |:conf|
|:browse|{cmd}	Fournit une fenêtre de dialogue GUI pour la commande si cette
		commande prend un nom de fichier			|:bro|
  |:browse|e .	Pour choisir un fichier à éditer
  |:browse|w	Pour choisir le nom de fichier où enregistrer
|:pwd|		Affiche le répertoire courant				 |:pw|
|:cd||:lcd|[-]	Change le répertoire courant (- pour retourner au précédent),
		|:lcd| pour définition locale du répertoire courant
|:X|		Chiffre (penser à l'option 'noswapfile')	  |encryption|
   vim|-x||-n|	Chiffre (|-n| = pas de fichier de swap)
|:buffers|	Liste les buffers ([!])				 |:files||:ls|
|:registers|	Affiche le contenu des registres (")		   |:reg||:di|
|:tabs|		Affiche les onglets
|:args|[..]	Affiche ou redéfinis les arguments de lancement de Vi	 |:ar|
|:history|[..]	Historique des commandes, peut prendre une option :
		  : (ou rien) : commandes
		  / : recherches
		  = : expression
		  @ : input line
		  > : debug
		  all : tout ce qui précède
		  en ajoutant first[,last] : limite l'affichage aux entrées
		  correspondantes					|:his|
|:marks|[..]	Affiche les marques
|:let|		Affiche les variables
|:jumps|	Affiche les sauts					 |:ju|
|:messages|	Affiche les messages précédemment affichés
|:scriptnames|	Affiche les scripts sourcés par Vim		      |:scrip|
|:digraphs|[..]	Affiche ou crée des digraphs (cf. |i_CTRL-K|)		|:dig|
|:autocmd|[..]	Affiche ou définis les commandes automatiques		 |:au|
|:command|[..]	Affiche les commandes (permet d'en créer)		|:com|
|:oldfiles|	Affiche les fichiers connus par viminfo			 |:ol|
|:filetype|	Affiche le statut de la détection automatique de type de
		fichier, exécuté avec on/off : active ou désactive    |:filet|
 :filetype detect	Détecte à nouveau le type de fichier |filetype-detect|
 :filetype plugin indent [on/off]
		Active ou désactive le chargement de fichiers de plugin ou
		d'indentation	      |filetype-plugin-on||filetype-indent-on|
|:intro|	Affiche la fenêtre d'introduction
|:language|[..]	Affiche la langue en cours ou la définis		|:lan|
		Liste des langues possibles sur Ubuntu 8.10 : /usr/lib/locale
		Peut prendre les options messages (mes) pour les messages,
		ctype (cty) pour la langue de l'encodage ou time (tim) pour la
		fonction strftime()
|:options|	Ouvre la fenêtre des options				|:opt|
|:recover|	Récupère un fichier du swap				|:rec|
|:redir|[..]	Redirige les messages vers un fichier (> ou >>), vers un
		registre (@{reg}> ou @{reg}>>) ou vers une variable (=> {var}
		ou =>> {var}), :redir END pour arrêter		       |:redi|
|:shell|	Lance un shell, retour à Vim à l'arrêt du shell		 |:sh|
|:swapname|	Affiche le nom du fichier d'échange			 |:sw|
|:undolist|	Affiche la liste undo				      |:undol|
|:undo| [{n}]	Annule le dernier changement (ou va au branchement n)	  |:u|
|:redo|		Rétablis le dernier changement annulé			|:red|
|:mksession|{f}	Enregistre la session courante sous forme d'un script Vim (f
		est de type .vim), réglé par 'sessionoptions'		|:mks|
|:source|{f}	Exécute le script f, permet incidemment de ramener une session
		enregistrée par :mksession dans f			 |:so|
   gvim -S {f}	Démarre gvim en rétablissant la session enregistrée dans f
|:mkview|[..]	Enregistre la vue (idem session mais pour la fenêtre), peut
		prendre en option un numéro de vue dans {1..9} et un nom de
		fichier. Réglé par les options 'viewoptions' et 'viewdir'.
		La vue peut être ramenée par |:so|		      |:mkvie|
|:loadview|[..]	Charge la vue, peut prendre en option le numéro de vue	 |:lo|
|:wviminfo|	Écris le fichier viminfo, nom de fichier en option	 |:wv|
|:rviminfo|	Lis le fichier viminfo, nom de fichier en option	 |:rv|
|:find|{f}	Recherche le fichier (dans 'path') et l'ouvre		|:fin|
|:center||:right||:left|	[range] [{n}] Centre, aligne le texte à droite
		ou à gauche, sur n colonnes (left : marge de n)|:ce||:ri||:le|
|:retab|{n}	Recalcule les tabulations avec un nouvelle valeur de tabstop
		Avec ! : Remplace tous les espaces par des <Tab>	|:ret|
|:checkpath|	Vérifie que les fichiers inclus sont trouvés		|:che|
|:copen|	Ouvre la fenêtre d'erreurs			       |:cope|
|:match|nom /rec/	Définis une expression régulière pour le groupe nom
			Fonctionne aussi avec 2match et 3match		|:mat|
|:highlight|..	Gestion de la coloration des groupes syntaxiques	 |:hi|
|:mkexrc|[{f}]	Écris les options et les mappings en cours dans le fichier f
		(.exrc par défaut)					 |:mk|
|:mkvimrc|[{f}]	Idem ci-dessus mais le fichier par défaut est .vimrc	|:mkv|
 :set termcap	Affiche les codes termcap du terminal	     |termcap-options|
|:verbose|{cmd}	Exécute cmd en mode verbose			       |:verb|
|:spellinfo|	Affiche les dictionnaires chargés		     |:spelli|
|:mkspell|{dict} Compile dict (.spl) en fonction de la liste source    |:mksp|
|:spellgood|{mot}	Marque le mot comme bien orthographié, comme la
			commande zg (! : comme zG)			|:spe|
|:spellwrong|{mot}	Marque le mot comme mal orthographié, comme la
			commande zw (! : comme zW)		     |:spellw|
|:spellundo|{mot}	Annule le dernier z[gw] (! : z[GW])	     |:spellu|
|:spellrepall|	Remplace dans la fenêtre en cours toutes les occurrences du
		mot pour lequel la commande z= a été exécutée	     |:spellr|
|:winpos|[X Y]	Affiche ou définis la position de la fenêtre	       |:winp|
|:gui|		Lance l'interface graphique				 |:gu|
|:earlier|{d}	Retourne en arrière, durée est suivie de s, m ou h	 |:ea|
|:earlier|{n}	Retourne en arrière de n coups
|:later|..	Idem :earlier ci-dessus					|:lat|
|:TOhtml|	[range] Convertis le fichier en HTML - cette commande est
		définie dans un plugin standard de Vim
|:redraw|	Redessine l'écran (comme |CTRL-L|), ! : efface d'abord |:redr|
|:sleep|{n}	Dors pendant n secondes					 |:sl|
|:fixdel|	Corrige la gestion de la touche Suppression (Delete)	|:fix|
|:silent|{cmd}	Exécute la commande silencieusement			|:sil|
|:menu|..	Gestion des menus			      |creating-menus|
|:colorscheme|.. Charge un thème de couleur, les thèmes sont des scripts .vim
		enregistrés dans $VIMRUNTIME/colors		       |:colo|
|:diffsplit|{f}	Ouvre f en mode comparaison (diff) avec le fichier actuel
|:diffthis|	Ajoute le fichier actuel aux diff en cours
|:diffoff|	Stoppe la comparaison pour la fenêtre actuelle
|:diffupdate|	Mets à jour les différences
|:diffpatch|{f}	Comme |:diffsplit| mais applique un fichier de patch au
		fichier en cours et démarre la comparaison
|:behave|{m}	Comportement de la souris, m est soit mswin, soit xterm  |:be|
|:version|	Affiche la version et les options de compilation de Vim  |:ve|
|:checktime|	Vérifie si un fichier édité a été modifié en dehors du
		contrôle de Vim, lié à 'autoread'		     |:checkt|

- Commandes Ex pour les tags

Ci-dessous, {tag} peut être un nom ou bien une expression régulière,
commençant par /
|:tags|		Liste les tags de la pile
:{n}tag		Descends de n dans la pile des tags, 1 par défaut
|:tag| {tag}	Va à tag						 |:ta|
|:stag|{tag}	Splitte la fenêtre et va à tag (aussi |CTRL-W_]|)
|:ptag|{tag}	Idem ci-dessus mais en pré-visualisation		|:pta|
|:tnext|	Prochaine occurrence si un tag est trouvé plusieurs fois, peut
		prendre un compte					 |:tn|
|:tprevious|	Idem ci-dessus pour l'occurrence précédente		 |:tp|
|:tfirst|	Idem ci-dessus pour la première occurrence		 |:tf|
|:tlast|	Idem ci-dessus pour la dernière occurrence		 |:tl|
|:tselect|{tag}	Affiche les occurrences de tag				 |:ts|
|:ptselect|{tag} Idem |:tselect| mais en pré-visualisation		|:pts|
|:pclose|	Ferme la fenêtre de pré-visualisation			 |:pc|

- Commandes quickfix

|:cnext||:cprevious|	Passe à l'erreur suivante ou précédente     |:cn||:cp|
|:cc|{n}	Affiche l'erreur numéro n
|:clist|	Affiche la liste des erreurs, ! : affiche tout		 |:cl|
|:cwindow|	Ouvre la fenêtre quickfix des erreurs			 |:cw|
|:vimgrep|..	Effectue une recherche et place les résultats dans une fenêtre
		quickfix, exemple >
		  :vimgrep /seb/ ~/**/*.txt
|:colder||:cnewer|	Parcours les listes d'erreur		 |:col||:cnew|

- Commandes Ex pour la programmation

|:pedit|{f}	Édite le fichier f dans la fenêtre de pré-visualisation |:ped|
|:psearch|/rec/	Cherche l'expression dans le fichier en cours et les fichiers
		include, et ouvre le fichier trouvé en pré-visualisation
		(utilise l'option 'path')				 |:ps|
|:checkpath|	Vérifie si les fichiers inclus sont trouvés (! : liste tous
		les fichiers)						|:che|
|:make|		Construis le programme					|:mak|
|:compiler|{s}	Définis le compilateur à utiliser, ! : global	       |:comp|
|:cfile|	

- Commandes Ex pour les abréviations

Ci-dessous, les préfixes i ou c sont optionnels, ils permettent de ne définir
une abréviation que pour le mode insertion (i) ou pour le mode ligne de
commande (c)
:[ic]abbreviate	Liste les abréviations ou définis une abréviation	 |:ab|
:[ic]unabbreviate	Supprime une abréviation			|:una|
:[ic]noreabbrev	Le texte de remplacement n'est pas mappé	      |:norea|
:[ic]abclear	Supprime les abréviations				|:abc|
Les options <buffer> et <expr> peuvent être placées juste après la commande,
voir map ci-dessous sur leur sens.

- Commandes Ex pour les map

Ci-dessous, les différentes commandes map peuvent être préfixées avec n
(normal), v (visuel), x (visuel mais pas sélection), s (sélection mais pas
visuel), o (en attente opérateur), i (insertion), c (commande) et l (lié à la
langue en cours.)
  v est l'union de x et s
  L'absence de préfixe (et pas de !) correspond à l'union de n, v et o
  s = sélection à la souris
  l implique i et c
  ! est l'union de i et c et exclut le mode normal (est utilisé sans préfixe)
:[{p}]map [..]	Définis un map clavier, en précédent éventuellement map de n,
		v, x, s, o, i, c ou l, ou en ajoutant un ! à map, exemple
		:imap, :vmap, :map!, :map, ...				|:map|
:[{p}]noremap [..]	Idem ci-dessus mais la cible (la partie {rhs}) n'est
			pas elle-même mappée				 |:no|
:[{p}]unmap [..]	Supprime le map					|:unm|
:[{p}]mapclear	Supprime tous les map				       |:mapc|
Les codes clavier sont décrits ici |key-notation|pour la notation usuelle et
ici |term.txt| pour la notation termcap, de type <t_qqchose>. Les touches
Contrôle, Shift et Alt sont notées C-, S- et M- (ou A- synonyme de M-). Ainsi
<C-F2> signifie CTRL-F2, <M-w> signifie ALT-W, etc.
Les commandes peuvent prendre des options écrites entre <>. Les options
doivent être placées après le nom de la commande, plusieurs options peuvent se
suivre. Options possibles :
  <buffer>	Map local au buffer
  <silent>	Ne pas afficher les commandes
  <special>	Autoriser la notation <> même si < est absent de 'cpoptions'
  <unique>	Produis une erreur si le map existe déjà
  <expr>	Exécuter du code (appel de fonction) dans {rhs}
  <script>	Map local au script
Les variables |mapleader| et |maplocalleader| permettent d'utiliser un préfixe
(\ par défaut), le code touche par défaut est |<Leader>| et |<LocalLeader>|.
La rhs <Nop> signifie "ne rien faire du tout".
Pour mapper un opérateur prenant un mouvement, consulter |:map-operator|

- Créer des commandes Ex

|:command|	Permet de définir de nouvelles commandes, de définir leurs
		arguments éventuels, d'indiquer si la commande peut prendre un
		range, etc.						|:com|
  -nargs=x	Définis le nombre d'arguments, x peut être 0, 1, *, ?, +. Dans
		la définition de la commande, |<args>| met tous les arguments,
		|<q-args>| quotte certains caractères spéciaux, |<f-args>|
		pour avoir une liste			      |:command-nargs|
  -range	Prends une zone, la ligne courante par défaut |:command-range|
		=% : prend une zone, le fichier en entier par défaut
		={n} : prend un range, la borne supérieure est n par défaut
  -count={n}	La commande accepte un compte, n par défaut, disponible dans
		|<count>|				      |:command-count|
  -bang		Accepte un ! éventuel et mets-le dans |<bang>| |:command-bang|
  -register	La commande peut prendre un registre, disponible dans |<reg>|
							   |:command-register|
  -complete=..	Réglage de l'auto-complétion, les valeurs possibles sont
		augroup, buffer, command, dir, environment, event, expression,
		file, shellcmd, function, help, highlight, mapping, menu,
		option, tag, tag_listfiles, var, custom,{fonction} ou
		customlist,{fonction}			   |:command-complete|
  -bar		La commande peut être suivie de |		|:command-bar|
  -buffer	Définis la commande pour le buffer courant   |:command-buffer|
|:delcommand|{cmd}	Efface la commande			       |:delc|
|:comclear|	Efface toues les commandes définies par l'utilisateur  |:comc|
|:autocmd|[group] {event} {pat} [nested] {cmd} Définis une auto-commande |:au|
 :autocmd! [..]	Supprime une ou toutes les auto-commande(s)
|:augroup|{group}	Place les auto-commandes définies ensuite dans le
			groupe {group}, le nom de groupe END retourne au
			groupe par défaut				|:aug|
 :augroup! {group}	Supprime un groupe d'auto-commandes
|:doautocmd|[group] {event} {f}	Exécute l'auto-commande			 |:do|
|:normal|{cmd}	cmd est exécutée comme si tapée au clavier, utile dans les
		scripts, avec ! Les mappings sont ignorés	       |:norm|
|:execute|..	Exécute la chaîne qui suit comme une commande Ex	|:exe|
|<line1>||<line2>|	Début et fin du range de la commande
 <lt>		Less-than, permet d'écrire par exemple <lt>bang>      |<args>|

- Explore

Les commandes qui Ex prennent un nom de fichier (:edit, :new, etc.) peuvent
être utilisées avec un nom de répertoire, dans ce cas une fenêtre Explorer est
ouverte. Exemple :
  :edit ~/
  :new .
Commandes dans une fenêtre Explorer
  <CR>	Ouvre le répertoire/fichier sur place
  o	Ouvre le répertoire/fichier dans une nouvelle fenêtre
  v	Ouvre le répertoire/fichier dans une nouvelle fenêtre, verticalement
  p	Pré-visualise
  i	Parcours différents modes d'affichage (plus ou moins détaillés)
  s	Parcours différents critères de tri
  r	Inverse l'ordre de tri
  -	Va au répertoire parent
  gh	Affiche/cache les répertoires et fichiers cachés
  c	le répertoire courant (pwd) devient le répertoire affiché
  R	Renomme le fichier sous le curseur
  D	Efface le fichier sous le curseur

==============================================================================
}}}
4. Registres					    *rp-registers* *rpreg* {{{

"0 .. "9	Historique des registres
"-		Petit registre, lorsque suppression de moins d'une ligne
"%		Nom du fichier actuel
"#		Nom de fichier alternatif
":		Dernière commande exécutée
"+		Clipboard
"/		Dernière recherche
".		Dernier texte inséré
"=		Expression, permet d'appeler une fonction

==============================================================================
}}}
5. Commandes					     *rp-commands* *rpcmd* {{{

|/||?|		Démarre une recherche (? : en arrière)
|n||N|		Recherche : occurrence suivante ou précédente
 *		Cherche le mot sous le curseur en avant			|star|
|#|		Cherche le mot sous le curseur en arrière
 g* |g#|	Idem * et # mais sans \< et \> autour de la recherche  |gstar|
|w||W||b||B|	Parcours les mots ou MOTS en avant (w, W) ou en arrière (b, B)
|e||E||ge||gE|	Va à la fin du mot ou du MOT suivant (ge, gE : précédent)
|H||M||L|	Positionne le curseur en haut, au milieu ou en bas de l'écran
|G|		Va à la ligne {compte} (fin du fichier par défaut)
|%|		Va à la ligne correspondant à {compte}% du fichier
|ga||g8|	Affiche le code ASCII ou UTF-8 du caractère sous le curseur
|8g8|		Trouve la prochaine séquence UTF-8 illégale
|g0||g^||g$|	Va en début ou fin de ligne virtuelle	     |g<Home>||g<End>|
|gj||gk|	Va ligne virtuelle suivante ou précédente     |g<Down>||g<Up>|
`[a-zA-Z0-9]	Va à la marque (minuscule : locale)			   |`|
'[a-zA-Z0-9]	Va à la marque en début de ligne (minuscule : locale)	   |'|
m[a-zA-Z]	Définis la marque					   |m|
|'^|		Va là où la dernière insertion a eu lieu
|'.|		Va là où le dernier changement a eu lieu
|.|		Répète le dernier changement
|u|		Annule le dernier changement
|U|		Annule tous les derniers changements sur la ligne
|g-||g+|	Reviens en arrière ou en avant dans les changements
|CTRL-R|	Rétablis le dernier changement annulé
|gm|		Va au milieu de la ligne à l'écran
|gv|		Re-sélectionne la précédente aire visual
|f|{c} |F|{c}	Va au caractère c sur la ligne (F : recherche en arrière)
|t|{c} |T|{c}	Idem f et F mais arrête le curseur un caractère avant
|,||;|		Répète le dernier f, F, t ou T (, : sens opposé)
|CTRL-O|	Recule (O comme Older) dans la liste des sauts
|CTRL-I|	Avance dans la liste des sauts			       |<Tab>|
|o||O|		Nouvelle ligne en haut (O) ou en bas (o)
|d||D|		Supprime, D : du curseur à la fin de la ligne
|c||C|		Remplace, C : du curseur à la fin de la ligne
|s||S||cc|	Supprime un caractère et insère, S ou cc : toute la ligne
|y||Y|		Copie, Y : la ligne
|a||A|		Insère du texte après le curseur (a) ou en fin de ligne (A)
|i||I|		Insère du texte au curseur (i) ou en début de ligne (I)
|gI|		Insère du texte en tout début de ligne (même si espaces)
|gi|		Reprends le mode insertion là où il s'est arrêté en dernier
|p||P|		Collage du registre après le curseur (p) ou avant (P)
|gp||gP|	Colle le registre et positionne le curseur après le texte
|]p||]P|	Colle le registre en ajustant l'indentation
|&|		Reproduis la dernière substitution sur la ligne en cours
|>||>>||<||<<|	Indentation vers la droite ou vers la gauche
|=||==|		Indente la ligne, réglé par 'equalprg' et 'indentexpr'
|v||V|		Mode visuel, caractère par caractère (v) ou par ligne (V)
|R|		Mode remplacement continu
|gR|		Mode remplacement virtuel (tel qu'à l'écran) continu
|r|{c}		Remplace le caractère sous le curseur avec c
|gr|{c}		Idem que r mais en mode virtuel (tel qu'à l'écran)
|J|		Joint la ligne courante avec la ligne suivante
|gJ|		Idem J mais sans ajouter un espace entre
|gu||gU||g~|	Passe en minuscule, majuscule, ou inverse la casse
|guu||gUU||g~~|	Idem gu, gU et g~, pour la ligne en cours
 g?		Applique la transformation ROT-13		       |rot13|
 g??		Idem g?, pour la ligne en cours
|gt||gT|	Passe à l'onglet suivant (gt) ou précédent (gT)
|q|{r}		Enregistre ce qui suit dans le registre (ajoute si r est une
		majuscule), jusqu'à nouvel appui sur q
|q:|		Ouvre la fenêtre des commandes
|q/||q?|	Ouvre la fenêtre de recherche
|CTRL-U||CTRL-D| Déplacement d'un demi-écran en haut ou en bas
|CTRL-B||CTRL-F| Déplacement d'un écran en haut ou en bas
		|<PageUp>||<PageDown>||<S-Up>||<S-Down>|
|CTRL-Y||CTRL-E| Scrolle d'une ligne en haut ou en bas
|gf|		Ouvre le fichier écrit sous le curseur
|CTRL-A||CTRL-X| Ajoute ou soustrait {compte} (1 par défaut) sous le curseur,
		réglé avec 'nrformats'. Windows : <CTRL-A> est mappé pour tout
		sélectionner, pour rétablir le <CTRL-A> d'origine, exécuter
		:unmap <C-A>
|CTRL-G|	Informations sur le fichier en cours, si {compte} est fourni,
		affiche le nom de fichier complet
|K|		Exécute un programme pour examiner le mot sous le curseur
|ZZ|		Comme |:x|
|ZQ|		Comme |:q!|
|@|{r}		Exécute le contenu du registre r
|@@|		Exécute à nouveau le dernier registre exécuté
|CTRL-^|	Édite le fichier alternatif, équivalent à :e #

|CTRL-W_CTRL-F|	Ouvre le fichier sous le curseur dans une nouvelle fenêtre
|CTRL-W_f|	Idem CTRL-W_CTRL-F
|CTRL-W_gf|	Ouvre le fichier sous le curseur dans un nouvel onglet
|CTRL-W_^|	Édite le fichier alternatif dans une nouvelle fenêtre
|CTRL-W_T|	Déplace la fenêtre actuelle dans un nouvel onglet
|CTRL-W_+||CTRL-W_-||CTRL-W_>||CTRL-W_<||CTRL-W_=||CTRL-W__||CTRL-W_bar|
		Redimensionne la fenêtre, + - change la hauteur, > < change la
		largeur, = taille identique, _ | agrandis au maximum
 CTRL-W_{n}_ CTRL-W_{n}|	Définis la taille horizontale ou verticale
|CTRL-W_H||CTRL-W_J||CTRL-W_K||CTRL-W_L|
		Déplace les fenêtres à gauche, en bas, en haut, à droite
|CTRL-W_s||CTRL-W_v|	Divise la fenêtre en 2 parties (v : vertical)
|CTRL-W_c|	Ferme la fenêtre courante
|CTRL-W_q|	Quitte la fenêtre courante
|CTRL-W_h||CTRL-W_j||CTRL-W_k||CTRL-W_l||CTRL-W_w|
		Va à la fenêtre de gauche, bas, haut, droite, et suivante
|CTRL-W_t||CTRL-W_b|
		Va à la fenêtre la plus en haut ou en bas
|CTRL-W_r||CTRL-W_R|	Fais tourner les fenêtres (R : sens inverse)
|CTRL-W_o|	Ferme toutes les fenêtres sauf la fenêtre courante
|CTRL-W_x|	Échange avec la fenêtre avec la suivante ou {compte}-ième

|CTRL-W_d|	Ouvre une nouvelle fenêtre sur la définition du mot
|CTRL-W_i|	Idem CTRL-W_d pour la déclaration
|CTRL-W_z|	Ferme le fenêtre de pré-visualisation          |CTRL-W_CTRL-Z|
|CTRL-W_P|	Va à la fenêtre de pré-visualisation
|[_CTRL-D||[_CTRL-I|	Va à la définition ou à la déclaration du mot
|]_CTRL-D||]_CTRL-I|	Idem ci-dessus, mais démarre la recherche au curseur
|gD|		Va à la définition de la fonction, dans le fichier courant
|gd|		Idem gd mais dans la fonction courante (partie entre ^{ et ^})
|[D||[I|	Affiche les définitions ou les déclarations du mot
|]D||]I|	Idem ci-dessus, mais démarre la recherche au curseur
|[d||[i||]d||]i|Idem ci-dessus mais n'affiche que la première occurrence
|[#||]#|	Parcours les #if/#ifdef/#else/#endif
|[m||]m|	Parcours les fonctions-membre
|[(||])||[{||]}|Parcours les blocs entre () ou {}
|[]||][|	Parcours les } en début de ligne en arrière ou en avant
|[c||]c|	En mode diff, va à la différence précédente ou suivante
|dp||do|	En mode diff, envoie (dp) ou récupère (do) un changement de
		l'autre fenêtre

|g_CTRL-G|	Informations sur la position du curseur
|g&|		Reproduis le dernier :s sur toutes les lignes
|go|		Va à l'octet de numéro {compte}
|g_CTRL-H|	Démarre le mode visual block
|g<|		Affiche le résultat de la dernière commande
|gq||gw|	Formate le texte (gw : conserve la position du curseur)

|z<CR>||z-||z.|	Scrolle pour que le curseur soit en haut, bas ou milieu
|zt||zb||zz|	Idem ci-dessus
|zs||ze|	Si l'option 'wrap' est désactivée (:set nowrap), positionne le
		curseur à gauche ou à droite de l'écran
|zh||z<Left>||zl||z<right>||zH||zL|
		Si l'option 'wrap' est désactivée, décale l'affichage vers la
		gauche ou la droite, zH ou zL : décale d'un demi-écran

|[s||]s|	Parcours les mots mal orthographiés, rares ou d'autres régions
|[S||]S|	Parcours les mots mal orthographiés uniquement
|z=|		Affiche des suggestions orthographiques
|zg||zG|	Marque le mot comme correct, G : pour la session
|zw||zW|	Marque le mot comme incorrect, W : pour la session
|zug||zuG||zuw||zuW|	Annule la dernière commande z[gGwW] effectuée
|CTRL-L|	Re-dessine l'écran, incidemment, rafraîchis l'affichage des
		mots mal orthographiés
|gs|		Dors pendant {compte} secondes (comme |:sleep|)

|zf||zd||zo||zc||za|	Crée, supprime, ouvre, ferme et bascule un fold
|zF|		Crée un fold pour N lignes
|zE|		Supprime tous les fold
|zD||zO||zC||zA|Supprime, ouvre, ferme et bascule les fold récursivement
|zv|		Ouvre le fold jusqu'à afficher la ligne du curseur
|zj||zk|	Va au fold précédent ou suivant
|zi|		Bascule la prise en compte des fold
|zn||zN|	Stoppe (n) ou active (N) la prise en compte des fold
|zM||zR|	Replie ou ouvre tous les fold à tous les niveaux
|zm||zr|	Replie ou ouvre tous les fold d'un niveau

|CTRL-]|	Va au tag sous le curseur	   |g<LeftMouse>||C-LeftMouse|
|CTRL-T|	Reviens en arrière dans les tags |g<RightMouse>||C-RightMouse|
|CTRL-W_]|	Va au tag sous le curseur, dans un nouvelle fenêtre
|CTRL-W_}|	Affiche le tag sous le curseur en pré-visualisation

==============================================================================
}}}
6. Sélection d'objets				 *rp-text-objects* *rpobj* {{{

Ces commandes sont à utiliser lorsque Vim attend un mouvement, y compris à
l'entrée en mode Visual. L'aide se trouve ici |text-objects|.

- Visual

|v||V||CTRL-V|	Démarre le mode visual, visual par ligne ou par bloc
 : !		Exécute une commande Ex ou un programme sur la sélection
		Visual						    |v_:||v_!|
 I A		Visual bloc : ajoute avant ou après le bloc	|V_b_I||v_b_A|
 O		Va horizontalement à l'autre coin de l'aire		 |v_O|
 o		Va à l'autre coin de l'aire				 |v_o|
 u U ~		Passe en minuscule, majuscule ou bascule       |v_u||v_U||v_~|
 r s c R S C	Supprime l'aire Visual et démarre l'édition de texte,
		majuscule : par ligne		|v_r||v_s||v_c||v_R||v_S||v_C|
 x X		Supprime l'aire (majuscule : par ligne)		    |v_x||v_X|
 y Y		Copie l'aire (majuscule : par ligne)		    |v_y||v_Y|

- Objets

 a" |a'||a`|	Sélectionne la chaîne de caractère entre " ou ' ou `  |aquote|
 i" |i'|	Idem mais sans les délimiteurs			      |iquote|
|a(||a)||ab|	Sélectionne la partie entre parenthèses
|i(||i)||ib|	Idem mais sans les parenthèses
|a<||a>|	Sélectionne la partie entre <>
|i<||i>|	Idem mais sans les délimiteurs <>
|a{||a}||aB|	Sélectionne la partie entre {}
|i{||i}||iB|	Idem mais sans les délimiteurs {}
|a[||a]|	Sélectionne la partie entre []
|i[||i]|	Idem mais sans les délimiteurs []
|aw|		Sélectionne le mot avec les espaces qui suivent
|iw|		Idem mais sans les espaces qui suivent
|aW|		Sélectionne le MOT avec les espaces qui suivent
|iW|		Idem mais sans les espaces qui suivent
|ap|		Sélectionne le paragraphe avec les lignes vides qui suivent
|ip|		Idem mais sans les lignes vides qui suivent
|as|		Sélectionne la phrase avec les délimiteurs qui suivent
|is|		Idem mais sans les délimiteurs qui suivent

==============================================================================
}}}
7. Aide								 *rp-help* {{{

Les commandes relatives aux tags s'appliquent aussi à la navigation dans
l'aide, consulter |CTRL-]|, |CTRL-T|, |CTRL-W_]|, |CTRL-W_}|.

|:help|[..]	Affiche l'écran d'aide en précisant éventuellement le sujet
		(tag) recherché						  |:h|
 :help 'option'	Affiche l'aide sur une option
 :help :{cmd}	Affiche l'aide sur une commande
 :help -{opt}	Affiche l'aide sur une option de lancement
|:helpgrep|{rec}[@ll]	Recherche l'expression régulière dans toute l'aide,
			mets les résultats dans une fenêtre quickfix
			(|:cwindow| pour afficher)		      |:helpg|
|:exusage|	Aide sur le mode Ex					|:exu|
|:viusage|	Aide sur les commandes					|:viu|

==============================================================================
}}}
8. Mode insertion				  *rp-insert-mode* *rpins* {{{

Le fichier |insert.txt| liste en détail le fonctionnement du mode insertion.

|i||s||a||I||S||A||o||O||c||C|	Démarre le mode insertion

|i_CTRL-R|		Colle un registre
|i_CTRL-R_CTRL-R|	Colle un registre littéralement (y compris caractères
			de contrôle)
|i_CTRL-R_CTRL-P|	Colle un registre, en corrigeant l'indentation
							      |[<MiddleMouse>|
|i_CTRL-N||i_CTRL-P|	Complétion suivante ou précédente, cf. 'complete'
     CTRL-Y CTRL-E	Accepte ou rejette la complétion proposée
|i_CTRL-W|		Efface le mot avant le curseur
|i_CTRL-U|		Efface depuis le curseur jusqu'au début de la ligne
|i_CTRL-T||i_CTRL-D|	Augmente ou diminue l'indentation
|i_CTRL-A||i_CTRL-@|	Insère le dernier texte saisi (@ : stoppe l'insertion)
|i_CTRL-Y||i_CTRL-E|	Insère le caractère de la ligne dessus ou dessous
|i_<Insert>|		Bascule entre mode insertion et mode remplacement
|i_CTRL-]|		Abréviation sans saisir de caractère supplémentaire
|i_CTRL-V|..		Saisie littérale du caractère suivant, codé ainsi :
			  chiffres : saisie décimale
			  o ou O puis chiffres : saisie octale
			  x ou X suivi de chiffres : saisie hexadécimale
			  u : saisie hexadécimale sur 4 caractères
			  U : saisie hexadécimale sur 8 caractères
|i_CTRL-K|..		Insère un digraph (essayer CTRL-K P I)
			Pratique pour insérer des caractères accentués sur un
			clavier qwerty, exemple : E^ pour e majuscule accent
			circonflexe, A` pour a majuscule accent grave, e' pour
			e accent aigu, etc.
|i_CTRL-O|		Passe en mode normal pour la prochaine commande puis
			retourne au mode insertion
|i_CTRL-L|		Seulement si 'insertmode' est activé, passe en mode
			normal jusqu'à appui sur la touche <Esc>
|i_CTRL-G_u|		Démarre un nouveau changement dans la liste undo
|i_CTRL-X_CTRL-L|	Complète une ligne entière
|i_CTRL-X_CTRL-N|	Complétion d'après le fichier en cours
|i_CTRL-X_CTRL-K|	Complétion d'après les dictionnaires
|i_CTRL-X_CTRL-T|	Complétion d'après les fichiers thesaurus
|i_CTRL-X_CTRL-I|	Complétion d'après le fichier en cours et inclus
|i_CTRL-X_CTRL-F|	Complétion sur un nom de fichier
|i_CTRL-X_CTRL-D|	Complétion d'après les définitions
|i_CTRL-X_CTRL-O|	Omni-complétion, lié à l'option 'omnifunc'
|i_CTRL-X_CTRL-U|	Complétion utilisateur, réglé par 'completefunc'
|i_CTRL-X_CTRL-V|	Complétion comme pour une commande Vim
|i_CTRL-X_s|		Suggestion orthographique (aussi i_CTRL-X_CTRL-S)
|i_CTRL-X_CTRL-Y|	Scrolle la fenêtre vers le haut du texte
|i_CTRL-X_CTRL-E|	Scrolle la fenêtre vers le bas du texte

==============================================================================
}}}
9. Recherches				   *rp-search-patterns* *rpsearch* {{{

- Dans la chaîne recherchée					     |pattern|
Ces éléments apparaissent dans les chaînes de recherche, autre autre, après /,
?, :/, :?, une commande de substitution, ...

.		N'importe quel caractère sauf saut de ligne		  |/.|
\< \>		Début ou fin de mot, lié à 'iskeyword' (zero-width) |/\<||/\>|
\c		Recherche insensible à la casse, même si 'noignorecase'  |/\c|
\C		Recherche sensible à la casse, même si 'ignorecase'	 |/\C|
*		L'atome précédent 0 fois ou plus		       |/star|
\+		Le caractère précédent 1 fois ou plus			 |/\+|
\? \=		Le caractère précédent 0 ou 1 fois			 |/\=|
\(..\)		Pour regrouper et mémoriser dans les \1, \2, etc.	 |/\(|
\%(..\)		Pour regrouper sans mémoriser dans \1, \2, etc.		|/\%(|
\|		"ou logique" entre termes, ainsi abc\|def signifie ou bien
		abc, ou bien def					|/bar|
\1 \2 ..	Ce qui est détecté entre \( \)				 |/\1|
\e \t \r	Échappement, tabulation et retour chariot      |/\e||/\t||/\r|
\b \n		Espace arrière (backspace) et nouvelle ligne	    |/\b||/\n|
\d \x \s \l \u \a				|/\d||/\x||/\s||/\l||/\u||/\a|
		Digit, hexadécimal, blanc, minuscule, majuscule, alphabétique
\D \X \S \L \U \A Tout sauf ...			|/\D||/\X||/\S||/\L||/\U||/\A|
\h \H		Alphabétique ou _ (\H : tout sauf)		    |/\h||/\H|
\w \W		Mot (\W : tout sauf)				    |/\w||/\W|
\i \k \p \f	Caractère dans un identificateur, mot-clé, imprimable, fichier
		Ces recherches sont réglées avec les options 'isident',
		'iskeyword', 'isprint', 'isfname'	  |/\i||/\k||/\p||/\f|
\I \K \P \F	Idem \i \k \p \f mais dans les chiffres   |/\I||/\K||/\P||/\F|
^		Détecte le début de ligne si placé en début d'expression ou
		après \|, \(, \%( ou \n (zero-width)			  |/^|
$		Détecte la fin de ligne si placé en fin d'expression ou avant
		\|, \), \%) ou \n (zero-width)				  |/$|
\_^ \_$		Détecte le début ou la fin de ligne n'importe où dans
		l'expression (zero-width)			  |/\_^||/\_$|
\%^ \%$		Début ou fin de fichier (zero-width)		  |/\%^||/\%$|
\%#		Détecte là où se trouve le curseur (zero-width)		|/\%#|
\_		Saut de ligne ou la classe de caractère qui suit	 |/\_|
		  \_s détecte soit un saut de ligne, soit un espacement
		  /"\_[^"]*" détecte une chaîne de caractères entre "",
			     pouvant être sur plusieurs lignes
		  \_. détecte n'importe quel caractère ou un saut de ligne
\{[-][n][,m]}	Répétition du caractère précédent entre n et m fois	 |/\{|
		  n négatif : aussi peu de caractères que possible (non avide)
		  \{n} : trouve exactement n occurrences
		  \{n,} : trouve au moins n occurrences
		  \{-n,} : trouve au moins n occurrences, non avide
		  \{-} : comme * mais non avide
[..]		Détecte un caractère dans l'ensemble entre crochets	  |/[|
  ^		  (si juste après [) : détecter tout sauf ce qui suit
  -		  Intervalle si pas en première position (a-z, A-Z, 0-9, ...)
		  Si placé en première position, le caractère '-' lui-même
  [:x:]		  Ensembles particuliers de caractères, x peut être alnum,
		  alpha, blank, cntrl, digit, graph, lower, print, punct,
		  space, upper, xdigit, return, tab, escape, backspace
  [=c=]		  Caractère c avec ou sans accent (ainsi [=e=] trouve e, é, è,
		  ë, ...) D'après l'aide, implémenté uniquement pour les
		  caractères latin1
\_[..]		Idem [..] mais inclut un saut de ligne, revient au même que
		d'inclure \n entre les crochets				|/\_[|
\%[..]		Détecte autant que possible dans [..], par exemple, r\%[ead]
		détectera read, à défaut rea, à défaut re, à défaut r	|/\%[|
\%dn,\%on,\%xn	Détecte le caractère de code n, n codé en décimal, octal ou
		hexadécimal				    |/\%d||/\%o||/\%x|
\%un,\%Un	Détecte le caractère décrit avec 4 (u) ou 8 (U) chiffres
		hexadécimaux					  |/\%u||/\%U|
\Z		Ignore certaines séquences unicode (arabe et hébreux)	 |/\Z|
~		La dernière chaîne de substitution			  |/~|
\%nl \%>nl \%<nl Détecte la ligne n ou après ou avant (zero-width)	|/\%l|
\%nc \%>nc \%<nc Détecte la colonne n ou après ou avant (zero-width)	|/\%c|
\%nv \%>nv \%<nv Détecte la colonne virtuelle (telle qu'à l'écran) n ou après
		 ou avant (zero-width)					|/\%v|
\%'m \%>'m \%<'m Recherche à la marque m ou après ou avant (zero-width) |/\%'|
\m \M		Le caractère qui suit est magique (\m) ou non (\M)
		(zero-width)						 |/\m|
\v \V		Tout ce qui suit (sauf alphanumérique) est magique (\v) ou non
		(\V) (zero-width)					 |/\v|
\&		"Et" entre termes (zero-width)				 |/\&|
\@= \@! \@<= \@<! \@>			      |/\@=||/\@!||/\@<=||/\@<!||/\@>|
		Détection zero-width à la position courante ou en arrière
		  foo\(bar\)\@=		"foo" dans "foobar"
		  foo\(bar\)\@!		tout "foo" non suivi de "bar"
		  hello\@<=file		"file" après hello
		  \(foo\)\@<!bar	tout "bar" qui n'est pas dans "foobar"
		  \(a*\)\@>a		rien (a* a tout pris)
\zs \ze		Démarre ou termine la détection (zero-width)	  |/\zs||/\ze|
		abc\zsdef détectera abcdef mais seul def sera pris en compte
		abc\zedef détectera abcdef mais seul abc sera pris en compte
\z(..\)		Utilisé dans la définition de région pour la coloration
		syntaxique						|/\z(|
\z1 \z2 ..	Également utilisé pour la coloration syntaxique        |/\z1(|

- Modificateurs (après le slash qui ferme la recherche)
Ne fonctionne pas en ligne de commande (pas :/ ou :?)	       |search-offset|

[-]{n}		Déplacement vertical à la ligne plus ou moins n
b{[-]n}		Déplacement horizontal par rapport au début
e{[-]n}		Déplacement horizontal par rapport à la fin
;		Réalise plusieurs recherches à la suite

==============================================================================
}}}
10. Lancement de Vim					      *rp-vimopts* {{{

- Options pouvant être données à Vim (vi, vim, gvim, etc.) au démarrage,
décrites dans |starting.txt|.

 -		Vim lit l'entrée standard et l'édite comme un nouveau fichier
|-b|		Mode binaire
|-c|..		Exécute une commande au démarrage de Vim, fonctionne aussi
		avec +, exemple : >
		  vim "+set si" main.c
		  vim "+find stdio.h"
		  vim -c "set ff=dos" -c wq mon_fichier
|-d|		Démarre en mode diff, comme avec |vimdiff|
|-e|		Démarre en mode Ex comme avec |Q|
|-f|		Ne forke pas, ce qui permet au processus appelant d'attendre
		l'arrêt de Vim					    |gui-fork|
|-g|		Démarre en mode graphique, comme avec gvim		 |gui|
|-o|[{n}]	Ouvre les fichiers donnés en argument dans autant de fenêtres
|-O|[{n}]	Idem -o mais splitte verticalement
|-p|[{n}]	Idem -o et -O mais dans des onglets
|-r|		Mode recovery, édite le fichier de swap, peut fonctionner avec
		un nom de fichier vide, dans ce cas il faut être dans le bon
		répertoire et exécuter vim -r "". vim -r sans nom de fichier
		liste les fichiers de swap trouvés dans 'directory'
							      |crash-recovery|
|-R|		Démarre en mode readonly (:set |readonly|)
|-s|{f}		Exécute le script
|-S|{f}		Exécute le script, équivalent à |-c|"source {f}"
|-u|{f}		Définis le fichier {vimrc} à exécuter au démarrage, ce qui
		court-circuite certaines initialisations, si f est NONE aucun
		fichier d'initialisation ni de plugin n'est lu, si f est NORC,
		ignore les fichiers d'initialisation mais charge les plugin
		quand même				      |initialization|
|-w|{f}		Enregistre tout ce qui est fait dans Vim dans un script

==============================================================================
}}}
11. Trucs					   *rp-tricks* *reptricks* {{{

1) Remplir le fichier avec des nombres qui s'incrémentent d'une unité à chaque
ligne								  |change.txt|
	Saisir un nombre puis commandes
	  q a Y p CTRL-A q <compte>@a
	{n}@a créera n lignes numérotées à partir du nombre saisi au départ.

2) Inverser les lignes du fichier				  |usr_12.txt|
>
	:g/^/m 0
	:'t+1,.g/^/m 't    " Pour inverser depuis 't jusqu'à la ligne courante

3) Pages de manuel dans Vim					  |usr_12.txt|
>
	  :runtime ftplugin/man.vim
<
	Ensuite exécuter >
	  :Man commande
<	ou bien
	  <MapLeader>K ou K pour afficher l'aide du mot sous le curseur.

4) Affichage automatique d'aide ou de fichier inclus d'après le mot sous le
curseur								 |windows.txt|
>
	  :au! CursorHold * nested exe "silent! psearch " . expand("<cword>")
	  :au! CursorHold * nested exe "silent! ptag " . expand("<cword>")
<
	psearch est plus général que ptag. Le délai d'affichage est réglé par
	l'option 'updatetime'.

5) Ouvrir un fichier au démarrage en le recherchant		  |usr_22.txt|
>
	vim "+find nom_fichier"
<	Recherche le fichier dans 'path', et l'ouvre en édition

6) Édition de fichiers compressés				    |compress|
	Par défaut, les auto-commandes de Vim reconnaissent les extensions .Z,
	.gz et .bz2.
	Vim décompresse et re-compresse automatiquement un fichier lorsqu'il a
	l'une de ces extensions.

7) Édition de fichiers sur Internet				  |usr_23.txt|
	À la place d'un nom de fichier, Vim peut prendre une URL de manière
	transparente, exemple : >
	  vim http://www.vim.org/index.html
<	Fonctionne aussi avec gf (mettre le curseur ci-dessus et appuyer sur
	les touches gf) et même avec 'path' et la commande :find.

8) Justifier le texte						  |usr_25.txt|
	Exécuter >
	  :runtime macros/justify.vim
<	puis justifier avec _j

9) Se déplacer d'après les lignes visibles à l'écran, utile si l'option 'wrap'
est activée							  |usr_25.txt|
>
	:map <Up> gk
	:map <Down> gj

10) Réunir des paragraphes dans des lignes uniques		  |usr_25.txt|
>
	:g/./,/^$/join

11) Démarrage de Vim de manière particulière			  |usr_26.txt|
	{prg} | vim -	Utiliser Vim pour éditer la sortie du programme
	vim -s script	Exécute le script
	vim -w script	Enregistre le script, ajoute au fichier s'il
			existe, -W pour écraser le fichier
	vim -s -e {f} < s.vim	Exécuter s.vim sur le fichier f
	  Exemple de script enregistré dans un fichier tel que s.vim : >
	  %s/-person-/Jones/g
	  write tempfile
	  quit

12) Expressions pour les folds					  |usr_28.txt|
Avant tout exécuter :set foldmethod=expr, afin de définir les fold d'après la
fonction foldexpr().
	Folder en fonction des lignes commençant par '>' >
	  :set foldexpr=strlen(substitute(substitute(getline(v:lnum),
		\ '\\s','',\"g\"),'[^>].*','',''))
<	Folder ensemble les lignes commençant par une tabulation >
	  :set foldexpr=getline(v:lnum)[0]==\"\\t\"
<	Folder les paragraphes >
	  :set foldexpr=getline(v:lnum)=~'^\\s*$'&&
		\ getline(v:lnum+1)=~'\\S'?'<1':1

13) Maps							     |map.txt|
>
	  :map <F4>  3w		" Fonctionne mais 2<F4> produit 23w
	  :map <F4>  @='3w'<CR>	" Fonctionne bien y compris 2<F4>
	  :map! <C-B> <C-R>=strftime("%D %H:%M")<CR>   " Insère date et heure
<
	Modifier ~/.inputrc (ou examiner /etc/inputrc) pour la gestion des
	séquences Alt-..., notées <M-...>. L'aide recommande dans certains cas
	d'y ajouter l'option set convert-meta on.

14) Chiffrement et déchiffrement transparent de fichiers avec gpg
D'après http://www.cipherdyne.org/blog/2008/02/interfacing-vim-with-gnupg-encrypted-files.html
>
	" Transparent editing of gpg encrypted files.
	" By Wouter Hanegraaff <wouter@blub.net>
	augroup encrypted
	au!
	" First make sure nothing is written to ~/.viminfo while editing
	" an encrypted file.
	autocmd BufReadPre,FileReadPre *.gpg set viminfo=
	" We don't want a swap file, as it writes unencrypted data to disk
	autocmd BufReadPre,FileReadPre *.gpg set noswapfile
	" Switch to binary mode to read the encrypted file
	autocmd BufReadPre,FileReadPre *.gpg set bin
	autocmd BufReadPre,FileReadPre *.gpg let ch_save = &ch|set ch=2
	autocmd BufReadPost,FileReadPost *.gpg '[,']!gpg --decrypt 2>
		\ /dev/null
	" Switch to normal mode for editing
	autocmd BufReadPost,FileReadPost *.gpg set nobin
	autocmd BufReadPost,FileReadPost *.gpg let &ch = ch_save|unlet ch_save
	autocmd BufReadPost,FileReadPost *.gpg execute
		\ ":doautocmd BufReadPost " . expand("%:r")
	" Convert all text to encrypted text before writing
	autocmd BufWritePre,FileWritePre *.gpg '[,']
		\ !gpg --default-recipient-self -ae 2>/dev/null
	" Undo the encryption so we are back in the normal text, directly
	" after the file has been written.
	autocmd BufWritePost,FileWritePost *.gpg u

15) Auto-complétion en fonction du type de fichier avec omnifunc
>
	" autocomplete funcs and identifiers for languages
	autocmd FileType python set omnifunc=pythoncomplete#Complete
	autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
	autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
	autocmd FileType css set omnifunc=csscomplete#CompleteCSS
	autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
	autocmd FileType php set omnifunc=phpcomplete#CompletePHP
	autocmd FileType c set omnifunc=ccomplete#Complete

16) Modification du comportement de la fenêtre des commandes	 |cmdline.txt|
	Exécute la commande et reviens à la fenêtre des commande avec <F5> >
	  :autocmd CmdwinEnter * map <buffer> <F5> <CR>q:
<	Ouvre la fenêtre des commandes en mode insertion >
	  :autocmd CmdwinEnter [:]  startinsert

17) Changer automatiquement de répertoire pour celui du fichier que l'on ouvre
>
	  :autocmd BufEnter * cd %:p:h
<
	Sinon, pour ouvrir l'explorateur en démarrant du répertoire où se
	trouve le fichier, exécuter >
	  :e %:h
<
	Mais cette commande est simplement équivalente à >
	  :Exp

18) Convertir l'aide de Vim au format HTML
	Dans le répertoire doc de Vim (/usr/share/vim/vimcurrent/doc sur
	Ubuntu 9.04), exécuter le programme vim2html.pl, exemple : >
	  mkdir ~/vimhtml
	  cd ~/vimhtml
	  /usr/share/vim/vimcurrent/doc/vim2html.pl \
		/usr/share/vim/vimcurrent/doc/tags \
		/usr/share/vim/vimcurrent/doc/*.txt ~/.vim/doc/*.txt

19) Omni-complétion pour le C++ (voir aussi utilisation des tags)
	Nécessite des tags à jour pour fonctionner. Récupérer le fichier
	omnicppcomplete-x.xx.zip à l'adresse
	  http://www.vim.org/scripts/script.php?script_id=1520
	(omnicppcomplete-0.41.zip au 05/10/09)
	Extraire l'archive directement dans ~/.vim, penser à ajouter >
	  filetype plugin on
<	au démarrage de Vim (~/.vimrc) et exécuter >
	  :helptags ~/.vim/doc
<	Ensuite l'aide est accessible avec, entre autres, la commande >
	  :h omnicppcomplete

20) Utilisation des tags
	Voir option 'tags' dans ce fichier au sujet des réglages.
	Installer le paquetage exuberant-ctags (1:5.7-4 au 10/05/09.)
	Exécuter (dans un shell ou :!ctags...) >
	  ctags -R .
<	pour scanner toutes l'arborescence du répertoire courant.
	Régler le fonctionnement de ctags avec le fichier ~/.ctags et l'option
	'tags', exemple de fichier ~/.ctags : >
	  --c++-kinds=+p
	  --fields=+iaS
	  --extra=+q
<	Les commandes >
	  ctags --list-languages
<	ou >
	  ctags --list-kinds
<	donnent des informations utiles sur la configuration de ctags

21) Créer une fenêtre comme quickfix avec un fichier de tags	  |usr_29.txt|
	Ouvrir le fichier de tags dans une nouvelle fenêtre (:split ou autre)
	et exécuter >
	  :nnoremap <buffer> <CR> 0ye<C-W>w:tag <C-R>"<CR>
<	Ensuite se placer à la ligne voulue et appuyer sur <CR>

22) Correction orthographique					   |spell.txt|
>
	:set spell spelllang=fr
<
	- Vim peut télécharger un dictionnaire manquant automatiquement. Il le
	  fera chaque fois qu'une langue ou un codage (encoding) donné ne
	  seront pas trouvés (recherche dans 'runtimepath'), et à condition
	  que l'utilisateur soit root (critère = accès r/w à $VIMRUNTIME ? À
	  vérifier). Ainsi sur ma Ubuntu 9.04, Vim lancé en tant
	  qu'utilisateur standard ne me propose pas le téléchargement au
	  moment d'exécuter la commande ci-dessus. Les fichiers s'appellent
	  LL.EEE.spl, LL = langue, EEE = encodage, la langue peut contenir une
	  région séparée par un underscore, ou un type séparé par un tiret,
	  exemple : en_us, en_ca, medical_ca, etc.

	- Un fichier optionnel, de même nom mais .spl étant remplacé par .sug,
	  améliore le système de suggestions.

	- Concrètement pour le français UTF-8, le téléchargement automatique
	  récupère les fichiers suivants : >
	    /usr/share/vim/vim72/spell/fr.utf-8.spl (558 KO)
	    /usr/share/vim/vim72/spell/fr.utf-8.sug (2269 KO)
<
	- L'option 'spellfile' indique le dictionnaire personnel (permettant
	  d'avoir sa propre liste de mots définis comme explicitement bien ou
	  mal orthographiés.) Par défaut l'option est définie et les fichiers
	  créés (un .add, un .add.spl) dès que des commandes comme zg ou zw
	  sont exécutées. Plusieurs dictionnaires peuvent être indiqués par
	  'spellfile'. Le {n} qui précède la commande zg (et d'autres
	  commandes) indique l'entrée de 'spellfile' où faire la mise à jour
	  (1 = premier fichier référencé par 'spellfile'.)
>
	:mkspell! fichier
<	  recrée le fichier .add.spl d'après le fichier .add, utile en cas de
	  mise à jour manuelle dans le .add.
>
	:spellinfo
<	  affiche les dictionnaires en cours d'utilisation.
>
	:runtime spell/cleanadd.vim
<	  nettoie les fichiers .add (les annulations produisent des lignes
	  commentées, commençant par un # unique, utiliser ## pour conserver
	  des commentaires.) Exécuter >
	    :let g:spell_clean_limit = {n}
<	  pour ignorer les fichiers modifiés dans les dernières {n} secondes.

23) Écrire la date dans la dernière ligne d'un fichier juste avant
enregistrement							  |usr_40.txt|
>
	:function DateInsert()
	:  $delete
	:  read !date
	:endfunction
	:autocmd FileWritePre * call DateInsert()

24) Changer la langue des menus					  |usr_45.txt|
>
	:source $VIMRUNTIME/delmenu.vim
	:set langmenu=en_GB.utf-8
	:source $VIMRUNTIME/menu.vim

25) Modifier la fenêtre Fichier | Ouvrir... (Win32)		 |editing.txt|
>
	:let g:browsefilter="Vim Scripts\t*.vim\nVim Startup Files\t*vimrc\n"
<
26) Exécuter les menus (fonctionne avec 'wildmenu' activé)	     |gui.txt|
Consulter |console-menus| >
	:source $VIMRUNTIME/menu.vim
	:set wildmenu
	:set cpo-=<
	:set wcm=<C-Z>
	:map <F4> :emenu <C-Z>

27) Mapper un opérateur, exemple qui compte les espaces		     |map.txt|
>
	nmap <silent> <F4> :set opfunc=CountSpaces<CR>g@
	vmap <silent> <F4> :<C-U>call CountSpaces(visualmode(), 1)<CR>

	function! CountSpaces(type, ...)
	  let sel_save = &selection
	  let &selection = "inclusive"
	  let reg_save = @@

	  if a:0  " Invoked from Visual mode, use '< and '> marks.
	    silent exe "normal! `<" . a:type . "`>y"
	  elseif a:type == 'line'
	    silent exe "normal! '[V']y"
	  elseif a:type == 'block'
	    silent exe "normal! `[\<C-V>`]y"
	  else
	    silent exe "normal! `[v`]y"
	  endif

	  echomsg strlen(substitute(@@, '[^ ]', '', 'g'))

	  let &selection = sel_save
	  let @@ = reg_save
	endfunction
<
28. Exécuter des commandes Vim depuis le système		  |usr_01.txt|
>
	vim -u NONE -c 'e $VIMRUNTIME/tutor/tutor' -c 'w! TUTORCOPY' -c 'q'
<
29. Ouvrir le fichier .vimrc sans savoir où il est		  |usr_05.txt|
>
	edit $MYVIMRC
<
30. Rendre le mode 'list' plus agréable à voir			  |usr_05.txt|
>
	:set listchars=tab:>-,trail:-,nbsp:%
<
31. Tester un jeu de couleurs					  |usr_06.txt|
>
	:runtime syntax/colortest.vim
<
32. Générer un fichier de sauvegarde par date/heure		  |usr_07.txt|
>
	:au BufWritePre * let &bex = '-' . strftime("%Y%b%d%X") . '~'
<
33. Substitution uniquement dans certaines lignes		  |usr_10.txt|
	Ne remplace foobar par barfoo que dans les lignes qui contiennent // >
	  :g+//+s/foobar/barfoo/g
<
34. Renommer des fichiers avec Vim				    |tips.txt|
>
	:r !ls *.c
	:%s/\(.*\).c/mv & \1.bla
	:w !sh
	:q!
<
35. Édition automatique de fichiers binaires avec xxd		    |tips.txt|
>
	" vim -b : edit binary using xxd-format!
	augroup Binary
	  au!
	  au BufReadPre  *.bin let &bin=1
	  au BufReadPost *.bin if &bin | %!xxd
	  au BufReadPost *.bin set ft=xxd | endif
	  au BufWritePre *.bin if &bin | %!xxd -r
	  au BufWritePre *.bin endif
	  au BufWritePost *.bin if &bin | %!xxd
	  au BufWritePost *.bin set nomod | endif
	augroup END
<
36. Utiliser Vim à la place de less				 |various.txt|
>
	$VIMRUNTIME/macros/less.sh 
<
37. Corriger la touche Suppression du Terminal			 |gui_x11.txt|
	Ajouter dans le fichier de démarrage du shell, par exemple, ~/.cshrc,
	la ligne suivante (CTRL-V CTRL-H pour écrire un véritable Contrôle-H
	littéral dans le fichier) : >
	  stty erase ^H
<
38. Ne pas modifier l'affichage HTML en fonction des balises
	Par défaut, du texte entouré de <b></b> sera affiché en gras, les
	liens soulignés, etc. Pour éviter cela, exécuter >
	  :let html_no_rendering=1
<	avant de charger le fichier HTML. Si le fichier HTML est déjà chargé,
	exécuter la commande ci-dessus puis :e!

39. Sauvegarde automatique des versions précédentes
	Il est pratique d'utiliser ":set nobackup" pour ne pas enregistrer de
	manière systématique une sauvegarde des fichiers modifiés. Le script
	suivant permet de faire une telle sauvegarde uniquement pour certains
	fichiers.
>
	  " Les fonctions Smt_BufWritePre_backup_options() et
	  " Smt_BufWritePost_backup_options() permettent d'activer la
	  " sauvegarde + le mode patch (conservation de la version d'origine)
	  " pour certains fichiers en particulier. L'utilisation des deux
	  " événements, Pre et Post, permet de ne pas modifier les variables
	  " globales par ailleurs. Sans cette précaution, une fois enregistré
	  " un fichier qui matche et modifie de ce fait les options patchmode,
	  " backup et backupext, les autres enregistrements se feraient
	  " également avec un patchmod, backup et backupext modifiés, même
	  " pour les fichiers qui ne matchent pas le pattern.
	  function Smt_BufWritePre_backup_options()
	  	let g:sav_patchmode=&patchmode
	  	let g:sav_backup=&backup
	  	let g:sav_backupext=&backupext
	  	let &patchmode=".orig"
	  	let &backup=1
		  " Une sauvegarde par jour, je trouve ça suffisant. Pour
		  " avoir un fichier de sauvegarde à chaque enregistrement,
		  " utiliser %Y%m%d%H%M%S
	  	let &backupext='-' . strftime("%Y%m%d")
	  endfunction

	  function Smt_BufWritePost_backup_options()
	  	let &patchmode=g:sav_patchmode
	  	let &backup=g:sav_backup
	  	let &backupext=g:sav_backupext
	  endfunction

	  " Exemple d'utilisation de ces scripts : sauvegarde automatique de
	  " tout fichier se trouvant dans /etc.
	  au BufWritePre /etc/* call Smt_BufWritePre_backup_options()
	  au BufWritePost /etc/* call Smt_BufWritePost_backup_options()
<
40. Modifier l'affichage des noms de tabs
	Tiré du livre 'Hacking Vim 7.2'.
>
	  " Pour modifier l'affichage des titres de tabs
	  function! ShortTabLine()
	  	let ret = ''
	  	for i in range(tabpagenr('$'))
	  		if i + 1 == tabpagenr()
	  			let ret .= '%#errorMsg#'
	  		else
	  			let ret .= '%#TabLine#'
	  		endif
	  		let buflist = tabpagebuflist(i + 1)
	  		let winnr = tabpagewinnr(i + 1)
	  		let buffername = bufname(buflist[winnr - 1])
	  		let filename = fnamemodify(buffername, ':t')
	  		if filename == ''
	  			let filename = 'noname'
	  		endif
	  		if strlen(filename) >= 12
	  			let ret .= '[' . filename[0:9] . '..]'
	  		else
	  			let ret .= '[' . filename . ']'
	  		endif
	  	endfor
	  	let ret .= '%#TabLineFill#%T'
	  	return ret
	  endfunction
	  set tabline=%!ShortTabLine()

	  " Idem ci-dessus, mais pour le GUI
	  function! ShortTabLabel()
	  	let bufnrlist = tabpagebuflist(v:lnum)
	  	let label = bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
	  	let filename = fnamemodify(label, ':t')
	  	if strlen(filename) >= 12
	  		let ret = filename[0:9] . '..'
	  	else
	  		let ret = filename
	  	endif
	  	return ret
	  endfunction
	  set guitablabel=%{ShortTabLabel()}
<
41. Modifier les tooltips (GUI uniquement)
	Tiré du livre 'Hacking Vim 7.2', édition Packt Publishing, auteur : Kim Schulz
	Pour afficher soit le contenu du fold sur lequel se trouve la souris,
	soit une suggestion orthographique.
>
	  " Tooltip s'affichant sur les tabs, en GUI
	  function! InfoGuiTooltip()
	  	let wincount = tabpagewinnr(tabpagenr(), '$')
	  	let bufferlist = ''
	  	for i in tabpagebuflist()
	  		let bufferlist .= "\n\t" . fnamemodify(bufname(i), ':t')
	  	endfor
	  	return bufname($) . "\n" . wincount . ' fenêtre(s)' . bufferlist . ' '
	  endfunction
	  set guitabtooltip=%!InfoGuiTooltip()

	  " Tooltip en GUI, général. S'il y a un fold, affiche le contenu du fold, sinon
	  " affiche la suggestion orthographique (si mot mal orthographié.)
	  function! FoldSpellBalloon()
	  	let foldStart = foldclosed(v:beval_lnum)
	  	let foldEnd = foldclosedend(v:beval_lnum)
	  	let lines = []
	  	if foldStart < 0
	  		  " Nous ne sommes pas sur un fold
	  		let lines = spellsuggest(spellbadword(v:beval_text)[0], 5, 0)
	  	else
	  		  " Nous sommes dans un fold
	  		let numLines = foldEnd - foldStart + 1
	  		if numLines > 31
	  			let lines = getline(foldStart, foldStart + 14)
	  			let lines += ['-- Snipped ' . (numLines - 30) . ' lines --']
	  			let lines += getline(foldEnd - 14, foldEnd)
	  		else
	  			let lines = getline(foldStart, foldEnd)
	  		endif
	  	endif
	  	return join(lines, has("balloon_multiline") ? "\n" : "")
	  endfunction
	  set balloonexpr=FoldSpellBalloon()
	  set ballooneval
<
42. Suivi d'un fichier en cours de remplissage.
	Rafraîchit l'affichage à intervalle régulier et à chaque fois, va à la
	fin du fichier. Idéal pour suivre un fichier de log par exemple.
>
	  au CursorHold * edit! execute "normal G" call feedkeys("0")
<

43. Paquetage vim-addon-manager
	Permet de gérer les plug-ins vim, très pratique

==============================================================================
}}}
12. Scripts utiles					      *rp-scripts* {{{

calendar		Affiche un calendrier dans une fenêtre à part
			http://www.vim.org/scripts/script.php?script_id=52
EnhancedCommentify	Permet de commenter/décommenter facilement le code
			http://www.vim.org/scripts/script.php?script_id=23
NERD_tree		Améliore l'explorateur de fichiers de vim, en
			affichant les répertoires et fichiers sous forme
			d'arborescence.
			http://www.vim.org/scripts/script.php?script_id=1658
taglist			Gère les TAGs dans une fenêtre dédiée pour parcourir
			facilement les éléments du code source (macros,
			variables, fonctions, etc.)
			http://www.vim.org/scripts/script.php?script_id=273
omnicppcomplete		Complétion du code C++ exploitant le contenu de
			fichiers tags mis à jour avec, par exemple, le
			programme ctags (paquetage exuberant-ctags)
			http://www.vim.org/scripts/script.php?script_id=1520
showmarks		Affiche les marques dans un liseret à gauche.
			http://www.vim.org/scripts/script.php?script_id=152

}}}
==============================================================================
vim:tw=78:ts=8:sw=8:fmr={{{,}}}:fdm=marker:
